/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  Kiwi,
  StoragePool,
  Zone,
  Region,
  StorageNFS,
  VNet,
} from './models';

/**
 * createKiwi - parameters interface
 */
export interface ICreateKiwiParams {
  regionId: string;
  kiwi: Kiwi;
}

/**
 * createRegion - parameters interface
 */
export interface ICreateRegionParams {
  region: Region;
}

/**
 * createStorageNFS - parameters interface
 */
export interface ICreateStorageNFSParams {
  regionId: string;
  storageNFS: StorageNFS;
  poolId?: string;
}

/**
 * createStoragePool - parameters interface
 */
export interface ICreateStoragePoolParams {
  regionId: string;
  storagePool: StoragePool;
}

/**
 * createVNet - parameters interface
 */
export interface ICreateVNetParams {
  regionId: string;
  vNet: VNet;
}

/**
 * createZone - parameters interface
 */
export interface ICreateZoneParams {
  regionId: string;
  zone: Zone;
}

/**
 * deleteRegion - parameters interface
 */
export interface IDeleteRegionParams {
  regionId: string;
}

/**
 * listRegionKiwis - parameters interface
 */
export interface IListRegionKiwisParams {
  regionId: string;
}

/**
 * listRegionStorageNFSs - parameters interface
 */
export interface IListRegionStorageNFSsParams {
  regionId: string;
  poolId?: string;
}

/**
 * listRegionStoragePools - parameters interface
 */
export interface IListRegionStoragePoolsParams {
  regionId: string;
}

/**
 * listRegionVNets - parameters interface
 */
export interface IListRegionVNetsParams {
  regionId: string;
}

/**
 * listRegionZones - parameters interface
 */
export interface IListRegionZonesParams {
  regionId: string;
}

/**
 * listRegions - parameters interface
 */
export interface IListRegionsParams {
}

/**
 * readRegion - parameters interface
 */
export interface IReadRegionParams {
  regionId: string;
}

/**
 * setRegionDefaultStorageNFS - parameters interface
 */
export interface ISetRegionDefaultStorageNFSParams {
  regionId: string;
  nfsId: string;
}

/**
 * setRegionDefaultStoragePool - parameters interface
 */
export interface ISetRegionDefaultStoragePoolParams {
  regionId: string;
  poolId: string;
}

/**
 * updateRegion - parameters interface
 */
export interface IUpdateRegionParams {
  regionId: string;
  region: Region;
}

/**
 * RegionApi - API class
 */
@autoinject()
export class RegionApi extends Api {

  /**
   * Creates a new RegionApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Creates a new Kiwi (Kowabunga Inner Wan Interface) provides edge-network services..
   * @param params.regionId The ID of the region.
   * @param params.kiwi Kiwi payload.
   */
  async createKiwi(params: ICreateKiwiParams): Promise<Kiwi> {
    // Verify required parameters are set
    this.ensureParamIsSet('createKiwi', params, 'regionId');
    this.ensureParamIsSet('createKiwi', params, 'kiwi');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/kiwi`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['kiwi'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new region.
   * @param params.region Region payload.
   */
  async createRegion(params: ICreateRegionParams): Promise<Region> {
    // Verify required parameters are set
    this.ensureParamIsSet('createRegion', params, 'region');

    // Create URL to call
    const url = `${this.basePath}/region`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['region'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new NFS storage.
   * @param params.regionId The ID of the region.
   * @param params.storageNFS StorageNFS payload.
   * @param params.poolId Storage pool ID (optional, region\&#39;s default if unspecified).
   */
  async createStorageNFS(params: ICreateStorageNFSParams): Promise<StorageNFS> {
    // Verify required parameters are set
    this.ensureParamIsSet('createStorageNFS', params, 'regionId');
    this.ensureParamIsSet('createStorageNFS', params, 'storageNFS');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/nfs`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'poolId': params['poolId'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['storageNFS'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new storage pool.
   * @param params.regionId The ID of the region.
   * @param params.storagePool StoragePool payload.
   */
  async createStoragePool(params: ICreateStoragePoolParams): Promise<StoragePool> {
    // Verify required parameters are set
    this.ensureParamIsSet('createStoragePool', params, 'regionId');
    this.ensureParamIsSet('createStoragePool', params, 'storagePool');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/pool`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['storagePool'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new virtual network.
   * @param params.regionId The ID of the region.
   * @param params.vNet VNet payload.
   */
  async createVNet(params: ICreateVNetParams): Promise<VNet> {
    // Verify required parameters are set
    this.ensureParamIsSet('createVNet', params, 'regionId');
    this.ensureParamIsSet('createVNet', params, 'vNet');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/vnet`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['vNet'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new availability zone.
   * @param params.regionId The ID of the region.
   * @param params.zone Zone payload.
   */
  async createZone(params: ICreateZoneParams): Promise<Zone> {
    // Verify required parameters are set
    this.ensureParamIsSet('createZone', params, 'regionId');
    this.ensureParamIsSet('createZone', params, 'zone');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/zone`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['zone'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Deletes an existing region.
   * @param params.regionId The ID of the region.
   */
  async deleteRegion(params: IDeleteRegionParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteRegion', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of Kiwi (Kowabunga Inner Wan Interface) provides edge-network services. objects.
   * @param params.regionId The ID of the region.
   */
  async listRegionKiwis(params: IListRegionKiwisParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listRegionKiwis', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/kiwis`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of NFS storage objects.
   * @param params.regionId The ID of the region.
   * @param params.poolId Storage pool ID (optional, region\&#39;s default if unspecified).
   */
  async listRegionStorageNFSs(params: IListRegionStorageNFSsParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listRegionStorageNFSs', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/nfs`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'poolId': params['poolId'],
      })

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of storage pool objects.
   * @param params.regionId The ID of the region.
   */
  async listRegionStoragePools(params: IListRegionStoragePoolsParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listRegionStoragePools', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/pools`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of virtual network objects.
   * @param params.regionId The ID of the region.
   */
  async listRegionVNets(params: IListRegionVNetsParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listRegionVNets', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/vnets`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of availability zone objects.
   * @param params.regionId The ID of the region.
   */
  async listRegionZones(params: IListRegionZonesParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listRegionZones', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/zones`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of region objects.
   */
  async listRegions(): Promise<Array<string>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/region`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a region.
   * @param params.regionId The ID of the region.
   */
  async readRegion(params: IReadRegionParams): Promise<Region> {
    // Verify required parameters are set
    this.ensureParamIsSet('readRegion', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a region setting of default NFS storage.
   * @param params.regionId The ID of the region.
   * @param params.nfsId The ID of the NFS storage.
   */
  async setRegionDefaultStorageNFS(params: ISetRegionDefaultStorageNFSParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('setRegionDefaultStorageNFS', params, 'regionId');
    this.ensureParamIsSet('setRegionDefaultStorageNFS', params, 'nfsId');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/nfs/{nfsId}/default`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`))
      .replace(`{${'nfsId'}}`, encodeURIComponent(`${params['nfsId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a region setting of default storage pool.
   * @param params.regionId The ID of the region.
   * @param params.poolId The ID of the storage pool.
   */
  async setRegionDefaultStoragePool(params: ISetRegionDefaultStoragePoolParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('setRegionDefaultStoragePool', params, 'regionId');
    this.ensureParamIsSet('setRegionDefaultStoragePool', params, 'poolId');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}/pool/{poolId}/default`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`))
      .replace(`{${'poolId'}}`, encodeURIComponent(`${params['poolId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Updates a region configuration.
   * @param params.regionId The ID of the region.
   * @param params.region Region payload.
   */
  async updateRegion(params: IUpdateRegionParams): Promise<Region> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateRegion', params, 'regionId');
    this.ensureParamIsSet('updateRegion', params, 'region');

    // Create URL to call
    const url = `${this.basePath}/region/{regionId}`
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['region'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

