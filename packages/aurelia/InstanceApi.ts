/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  InstanceRemoteAccess,
  InstanceState,
  Instance,
} from './models';

/**
 * deleteInstance - parameters interface
 */
export interface IDeleteInstanceParams {
  instanceId: string;
}

/**
 * listInstances - parameters interface
 */
export interface IListInstancesParams {
}

/**
 * readInstance - parameters interface
 */
export interface IReadInstanceParams {
  instanceId: string;
}

/**
 * readInstanceRemoteConnection - parameters interface
 */
export interface IReadInstanceRemoteConnectionParams {
  instanceId: string;
}

/**
 * readInstanceState - parameters interface
 */
export interface IReadInstanceStateParams {
  instanceId: string;
}

/**
 * rebootInstance - parameters interface
 */
export interface IRebootInstanceParams {
  instanceId: string;
}

/**
 * resetInstance - parameters interface
 */
export interface IResetInstanceParams {
  instanceId: string;
}

/**
 * resumeInstance - parameters interface
 */
export interface IResumeInstanceParams {
  instanceId: string;
}

/**
 * shutdownInstance - parameters interface
 */
export interface IShutdownInstanceParams {
  instanceId: string;
}

/**
 * startInstance - parameters interface
 */
export interface IStartInstanceParams {
  instanceId: string;
}

/**
 * stopInstance - parameters interface
 */
export interface IStopInstanceParams {
  instanceId: string;
}

/**
 * suspendInstance - parameters interface
 */
export interface ISuspendInstanceParams {
  instanceId: string;
}

/**
 * updateInstance - parameters interface
 */
export interface IUpdateInstanceParams {
  instanceId: string;
  instance: Instance;
}

/**
 * InstanceApi - API class
 */
@autoinject()
export class InstanceApi extends Api {

  /**
   * Creates a new InstanceApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Deletes an existing virtual machine instance.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async deleteInstance(params: IDeleteInstanceParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteInstance', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of virtual machine instance objects.
   */
  async listInstances(): Promise<Array<string>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/instance`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a virtual machine instance.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async readInstance(params: IReadInstanceParams): Promise<Instance> {
    // Verify required parameters are set
    this.ensureParamIsSet('readInstance', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a virtual machine instance remote access characteristics.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async readInstanceRemoteConnection(params: IReadInstanceRemoteConnectionParams): Promise<InstanceRemoteAccess> {
    // Verify required parameters are set
    this.ensureParamIsSet('readInstanceRemoteConnection', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}/connect`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a virtual machine instance state.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async readInstanceState(params: IReadInstanceStateParams): Promise<InstanceState> {
    // Verify required parameters are set
    this.ensureParamIsSet('readInstanceState', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}/state`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a virtual machine instance software reboot.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async rebootInstance(params: IRebootInstanceParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('rebootInstance', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}/reboot`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a virtual machine instance hardware reset.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async resetInstance(params: IResetInstanceParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('resetInstance', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}/reset`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a virtual machine instance software PM resume.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async resumeInstance(params: IResumeInstanceParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('resumeInstance', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}/resume`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a virtual machine instance software shutdown.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async shutdownInstance(params: IShutdownInstanceParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('shutdownInstance', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}/shutdown`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a virtual machine instance hardware boot-up.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async startInstance(params: IStartInstanceParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('startInstance', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}/start`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a virtual machine instance hardware stop.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async stopInstance(params: IStopInstanceParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('stopInstance', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}/stop`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a virtual machine instance software PM suspend.
   * @param params.instanceId The ID of the virtual machine instance.
   */
  async suspendInstance(params: ISuspendInstanceParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('suspendInstance', params, 'instanceId');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}/suspend`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Updates a virtual machine instance configuration.
   * @param params.instanceId The ID of the virtual machine instance.
   * @param params.instance Instance payload.
   */
  async updateInstance(params: IUpdateInstanceParams): Promise<Instance> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateInstance', params, 'instanceId');
    this.ensureParamIsSet('updateInstance', params, 'instance');

    // Create URL to call
    const url = `${this.basePath}/instance/{instanceId}`
      .replace(`{${'instanceId'}}`, encodeURIComponent(`${params['instanceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['instance'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

