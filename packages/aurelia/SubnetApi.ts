/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  Adapter,
  Subnet,
} from './models';

/**
 * createAdapter - parameters interface
 */
export interface ICreateAdapterParams {
  subnetId: string;
  adapter: Adapter;
  assignIP?: boolean;
}

/**
 * deleteSubnet - parameters interface
 */
export interface IDeleteSubnetParams {
  subnetId: string;
}

/**
 * listSubnetAdapters - parameters interface
 */
export interface IListSubnetAdaptersParams {
  subnetId: string;
}

/**
 * listSubnets - parameters interface
 */
export interface IListSubnetsParams {
}

/**
 * readSubnet - parameters interface
 */
export interface IReadSubnetParams {
  subnetId: string;
}

/**
 * updateSubnet - parameters interface
 */
export interface IUpdateSubnetParams {
  subnetId: string;
  subnet: Subnet;
}

/**
 * SubnetApi - API class
 */
@autoinject()
export class SubnetApi extends Api {

  /**
   * Creates a new SubnetApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Creates a new network adapter.
   * @param params.subnetId The ID of the network subnet.
   * @param params.adapter Adapter payload.
   * @param params.assignIP Whether Kowabunga should pick and assign an IP address to this adapter.
   */
  async createAdapter(params: ICreateAdapterParams): Promise<Adapter> {
    // Verify required parameters are set
    this.ensureParamIsSet('createAdapter', params, 'subnetId');
    this.ensureParamIsSet('createAdapter', params, 'adapter');

    // Create URL to call
    const url = `${this.basePath}/subnet/{subnetId}/adapter`
      .replace(`{${'subnetId'}}`, encodeURIComponent(`${params['subnetId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'assignIP': params['assignIP'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['adapter'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Deletes an existing network subnet.
   * @param params.subnetId The ID of the network subnet.
   */
  async deleteSubnet(params: IDeleteSubnetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteSubnet', params, 'subnetId');

    // Create URL to call
    const url = `${this.basePath}/subnet/{subnetId}`
      .replace(`{${'subnetId'}}`, encodeURIComponent(`${params['subnetId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of network adapter objects.
   * @param params.subnetId The ID of the network subnet.
   */
  async listSubnetAdapters(params: IListSubnetAdaptersParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listSubnetAdapters', params, 'subnetId');

    // Create URL to call
    const url = `${this.basePath}/subnet/{subnetId}/adapters`
      .replace(`{${'subnetId'}}`, encodeURIComponent(`${params['subnetId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of network subnet objects.
   */
  async listSubnets(): Promise<Array<string>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/subnet`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a network subnet.
   * @param params.subnetId The ID of the network subnet.
   */
  async readSubnet(params: IReadSubnetParams): Promise<Subnet> {
    // Verify required parameters are set
    this.ensureParamIsSet('readSubnet', params, 'subnetId');

    // Create URL to call
    const url = `${this.basePath}/subnet/{subnetId}`
      .replace(`{${'subnetId'}}`, encodeURIComponent(`${params['subnetId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Updates a network subnet configuration.
   * @param params.subnetId The ID of the network subnet.
   * @param params.subnet Subnet payload.
   */
  async updateSubnet(params: IUpdateSubnetParams): Promise<Subnet> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateSubnet', params, 'subnetId');
    this.ensureParamIsSet('updateSubnet', params, 'subnet');

    // Create URL to call
    const url = `${this.basePath}/subnet/{subnetId}`
      .replace(`{${'subnetId'}}`, encodeURIComponent(`${params['subnetId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['subnet'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

