/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  ApiToken,
} from './models';

/**
 * deleteApiToken - parameters interface
 */
export interface IDeleteApiTokenParams {
  tokenId: string;
}

/**
 * listApiTokens - parameters interface
 */
export interface IListApiTokensParams {
}

/**
 * readApiToken - parameters interface
 */
export interface IReadApiTokenParams {
  tokenId: string;
}

/**
 * updateApiToken - parameters interface
 */
export interface IUpdateApiTokenParams {
  tokenId: string;
  apiToken: ApiToken;
}

/**
 * TokenApi - API class
 */
@autoinject()
export class TokenApi extends Api {

  /**
   * Creates a new TokenApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Deletes an existing server-to-server authentication security token.
   * @param params.tokenId The ID of the server-to-server authentication security token.
   */
  async deleteApiToken(params: IDeleteApiTokenParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteApiToken', params, 'tokenId');

    // Create URL to call
    const url = `${this.basePath}/token/{tokenId}`
      .replace(`{${'tokenId'}}`, encodeURIComponent(`${params['tokenId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of server-to-server authentication security token objects.
   */
  async listApiTokens(): Promise<Array<string>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/token`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a server-to-server authentication security token.
   * @param params.tokenId The ID of the server-to-server authentication security token.
   */
  async readApiToken(params: IReadApiTokenParams): Promise<ApiToken> {
    // Verify required parameters are set
    this.ensureParamIsSet('readApiToken', params, 'tokenId');

    // Create URL to call
    const url = `${this.basePath}/token/{tokenId}`
      .replace(`{${'tokenId'}}`, encodeURIComponent(`${params['tokenId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Updates a server-to-server authentication security token configuration.
   * @param params.tokenId The ID of the server-to-server authentication security token.
   * @param params.apiToken ApiToken payload.
   */
  async updateApiToken(params: IUpdateApiTokenParams): Promise<ApiToken> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateApiToken', params, 'tokenId');
    this.ensureParamIsSet('updateApiToken', params, 'apiToken');

    // Create URL to call
    const url = `${this.basePath}/token/{tokenId}`
      .replace(`{${'tokenId'}}`, encodeURIComponent(`${params['tokenId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['apiToken'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

