/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  KaktusCaps,
  Kaktus,
} from './models';

/**
 * deleteKaktus - parameters interface
 */
export interface IDeleteKaktusParams {
  kaktusId: string;
}

/**
 * listKaktusInstances - parameters interface
 */
export interface IListKaktusInstancesParams {
  kaktusId: string;
}

/**
 * listKaktuss - parameters interface
 */
export interface IListKaktussParams {
}

/**
 * readKaktus - parameters interface
 */
export interface IReadKaktusParams {
  kaktusId: string;
}

/**
 * readKaktusCaps - parameters interface
 */
export interface IReadKaktusCapsParams {
  kaktusId: string;
}

/**
 * updateKaktus - parameters interface
 */
export interface IUpdateKaktusParams {
  kaktusId: string;
  kaktus: Kaktus;
}

/**
 * KaktusApi - API class
 */
@autoinject()
export class KaktusApi extends Api {

  /**
   * Creates a new KaktusApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Deletes an existing Kaktus computing node.
   * @param params.kaktusId The ID of the Kaktus computing node.
   */
  async deleteKaktus(params: IDeleteKaktusParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteKaktus', params, 'kaktusId');

    // Create URL to call
    const url = `${this.basePath}/kaktus/{kaktusId}`
      .replace(`{${'kaktusId'}}`, encodeURIComponent(`${params['kaktusId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of virtual machine instance objects.
   * @param params.kaktusId The ID of the Kaktus computing node.
   */
  async listKaktusInstances(params: IListKaktusInstancesParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listKaktusInstances', params, 'kaktusId');

    // Create URL to call
    const url = `${this.basePath}/kaktus/{kaktusId}/instances`
      .replace(`{${'kaktusId'}}`, encodeURIComponent(`${params['kaktusId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of Kaktus computing node objects.
   */
  async listKaktuss(): Promise<Array<string>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/kaktus`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a Kaktus computing node.
   * @param params.kaktusId The ID of the Kaktus computing node.
   */
  async readKaktus(params: IReadKaktusParams): Promise<Kaktus> {
    // Verify required parameters are set
    this.ensureParamIsSet('readKaktus', params, 'kaktusId');

    // Create URL to call
    const url = `${this.basePath}/kaktus/{kaktusId}`
      .replace(`{${'kaktusId'}}`, encodeURIComponent(`${params['kaktusId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a Kaktus computing node capability.
   * @param params.kaktusId The ID of the Kaktus computing node.
   */
  async readKaktusCaps(params: IReadKaktusCapsParams): Promise<KaktusCaps> {
    // Verify required parameters are set
    this.ensureParamIsSet('readKaktusCaps', params, 'kaktusId');

    // Create URL to call
    const url = `${this.basePath}/kaktus/{kaktusId}/caps`
      .replace(`{${'kaktusId'}}`, encodeURIComponent(`${params['kaktusId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Updates a Kaktus computing node configuration.
   * @param params.kaktusId The ID of the Kaktus computing node.
   * @param params.kaktus Kaktus payload.
   */
  async updateKaktus(params: IUpdateKaktusParams): Promise<Kaktus> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateKaktus', params, 'kaktusId');
    this.ensureParamIsSet('updateKaktus', params, 'kaktus');

    // Create URL to call
    const url = `${this.basePath}/kaktus/{kaktusId}`
      .replace(`{${'kaktusId'}}`, encodeURIComponent(`${params['kaktusId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['kaktus'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

