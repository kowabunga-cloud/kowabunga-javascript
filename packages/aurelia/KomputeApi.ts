/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  InstanceState,
  Kompute,
} from './models';

/**
 * deleteKompute - parameters interface
 */
export interface IDeleteKomputeParams {
  komputeId: string;
}

/**
 * listKomputes - parameters interface
 */
export interface IListKomputesParams {
}

/**
 * readKompute - parameters interface
 */
export interface IReadKomputeParams {
  komputeId: string;
}

/**
 * readKomputeState - parameters interface
 */
export interface IReadKomputeStateParams {
  komputeId: string;
}

/**
 * rebootKompute - parameters interface
 */
export interface IRebootKomputeParams {
  komputeId: string;
}

/**
 * resetKompute - parameters interface
 */
export interface IResetKomputeParams {
  komputeId: string;
}

/**
 * resumeKompute - parameters interface
 */
export interface IResumeKomputeParams {
  komputeId: string;
}

/**
 * shutdownKompute - parameters interface
 */
export interface IShutdownKomputeParams {
  komputeId: string;
}

/**
 * startKompute - parameters interface
 */
export interface IStartKomputeParams {
  komputeId: string;
}

/**
 * stopKompute - parameters interface
 */
export interface IStopKomputeParams {
  komputeId: string;
}

/**
 * suspendKompute - parameters interface
 */
export interface ISuspendKomputeParams {
  komputeId: string;
}

/**
 * updateKompute - parameters interface
 */
export interface IUpdateKomputeParams {
  komputeId: string;
  kompute: Kompute;
}

/**
 * KomputeApi - API class
 */
@autoinject()
export class KomputeApi extends Api {

  /**
   * Creates a new KomputeApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Deletes an existing Kompute.
   * @param params.komputeId The ID of the Kompute.
   */
  async deleteKompute(params: IDeleteKomputeParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteKompute', params, 'komputeId');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of Kompute objects.
   */
  async listKomputes(): Promise<Array<string>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/kompute`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a Kompute.
   * @param params.komputeId The ID of the Kompute.
   */
  async readKompute(params: IReadKomputeParams): Promise<Kompute> {
    // Verify required parameters are set
    this.ensureParamIsSet('readKompute', params, 'komputeId');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a virtual machine instance state.
   * @param params.komputeId The ID of the Kompute.
   */
  async readKomputeState(params: IReadKomputeStateParams): Promise<InstanceState> {
    // Verify required parameters are set
    this.ensureParamIsSet('readKomputeState', params, 'komputeId');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}/state`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a Kompute software reboot.
   * @param params.komputeId The ID of the Kompute.
   */
  async rebootKompute(params: IRebootKomputeParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('rebootKompute', params, 'komputeId');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}/reboot`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a Kompute hardware reset.
   * @param params.komputeId The ID of the Kompute.
   */
  async resetKompute(params: IResetKomputeParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('resetKompute', params, 'komputeId');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}/reset`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a Kompute software PM resume.
   * @param params.komputeId The ID of the Kompute.
   */
  async resumeKompute(params: IResumeKomputeParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('resumeKompute', params, 'komputeId');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}/resume`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a Kompute software shutdown.
   * @param params.komputeId The ID of the Kompute.
   */
  async shutdownKompute(params: IShutdownKomputeParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('shutdownKompute', params, 'komputeId');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}/shutdown`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a Kompute hardware boot-up.
   * @param params.komputeId The ID of the Kompute.
   */
  async startKompute(params: IStartKomputeParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('startKompute', params, 'komputeId');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}/start`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a Kompute hardware stop.
   * @param params.komputeId The ID of the Kompute.
   */
  async stopKompute(params: IStopKomputeParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('stopKompute', params, 'komputeId');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}/stop`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a Kompute software PM suspend.
   * @param params.komputeId The ID of the Kompute.
   */
  async suspendKompute(params: ISuspendKomputeParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('suspendKompute', params, 'komputeId');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}/suspend`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Updates a Kompute configuration.
   * @param params.komputeId The ID of the Kompute.
   * @param params.kompute Kompute payload.
   */
  async updateKompute(params: IUpdateKomputeParams): Promise<Kompute> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateKompute', params, 'komputeId');
    this.ensureParamIsSet('updateKompute', params, 'kompute');

    // Create URL to call
    const url = `${this.basePath}/kompute/{komputeId}`
      .replace(`{${'komputeId'}}`, encodeURIComponent(`${params['komputeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['kompute'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

