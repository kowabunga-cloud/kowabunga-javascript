/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  StoragePool,
  Template,
} from './models';

/**
 * createTemplate - parameters interface
 */
export interface ICreateTemplateParams {
  poolId: string;
  template: Template;
}

/**
 * deleteStoragePool - parameters interface
 */
export interface IDeleteStoragePoolParams {
  poolId: string;
}

/**
 * listStoragePoolTemplates - parameters interface
 */
export interface IListStoragePoolTemplatesParams {
  poolId: string;
}

/**
 * listStoragePoolVolumes - parameters interface
 */
export interface IListStoragePoolVolumesParams {
  poolId: string;
}

/**
 * listStoragePools - parameters interface
 */
export interface IListStoragePoolsParams {
}

/**
 * readStoragePool - parameters interface
 */
export interface IReadStoragePoolParams {
  poolId: string;
}

/**
 * setStoragePoolDefaultTemplate - parameters interface
 */
export interface ISetStoragePoolDefaultTemplateParams {
  poolId: string;
  templateId: string;
}

/**
 * updateStoragePool - parameters interface
 */
export interface IUpdateStoragePoolParams {
  poolId: string;
  storagePool: StoragePool;
}

/**
 * PoolApi - API class
 */
@autoinject()
export class PoolApi extends Api {

  /**
   * Creates a new PoolApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Creates a new image template.
   * @param params.poolId The ID of the storage pool.
   * @param params.template Template payload.
   */
  async createTemplate(params: ICreateTemplateParams): Promise<Template> {
    // Verify required parameters are set
    this.ensureParamIsSet('createTemplate', params, 'poolId');
    this.ensureParamIsSet('createTemplate', params, 'template');

    // Create URL to call
    const url = `${this.basePath}/pool/{poolId}/template`
      .replace(`{${'poolId'}}`, encodeURIComponent(`${params['poolId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['template'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Deletes an existing storage pool.
   * @param params.poolId The ID of the storage pool.
   */
  async deleteStoragePool(params: IDeleteStoragePoolParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteStoragePool', params, 'poolId');

    // Create URL to call
    const url = `${this.basePath}/pool/{poolId}`
      .replace(`{${'poolId'}}`, encodeURIComponent(`${params['poolId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of image template objects.
   * @param params.poolId The ID of the storage pool.
   */
  async listStoragePoolTemplates(params: IListStoragePoolTemplatesParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listStoragePoolTemplates', params, 'poolId');

    // Create URL to call
    const url = `${this.basePath}/pool/{poolId}/templates`
      .replace(`{${'poolId'}}`, encodeURIComponent(`${params['poolId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of storage volume objects.
   * @param params.poolId The ID of the storage pool.
   */
  async listStoragePoolVolumes(params: IListStoragePoolVolumesParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listStoragePoolVolumes', params, 'poolId');

    // Create URL to call
    const url = `${this.basePath}/pool/{poolId}/volumes`
      .replace(`{${'poolId'}}`, encodeURIComponent(`${params['poolId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of storage pool objects.
   */
  async listStoragePools(): Promise<Array<string>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/pool`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a storage pool.
   * @param params.poolId The ID of the storage pool.
   */
  async readStoragePool(params: IReadStoragePoolParams): Promise<StoragePool> {
    // Verify required parameters are set
    this.ensureParamIsSet('readStoragePool', params, 'poolId');

    // Create URL to call
    const url = `${this.basePath}/pool/{poolId}`
      .replace(`{${'poolId'}}`, encodeURIComponent(`${params['poolId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a storage pool setting of default template.
   * @param params.poolId The ID of the storage pool.
   * @param params.templateId The ID of the image template.
   */
  async setStoragePoolDefaultTemplate(params: ISetStoragePoolDefaultTemplateParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('setStoragePoolDefaultTemplate', params, 'poolId');
    this.ensureParamIsSet('setStoragePoolDefaultTemplate', params, 'templateId');

    // Create URL to call
    const url = `${this.basePath}/pool/{poolId}/template/{templateId}/default`
      .replace(`{${'poolId'}}`, encodeURIComponent(`${params['poolId']}`))
      .replace(`{${'templateId'}}`, encodeURIComponent(`${params['templateId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Updates a storage pool configuration.
   * @param params.poolId The ID of the storage pool.
   * @param params.storagePool StoragePool payload.
   */
  async updateStoragePool(params: IUpdateStoragePoolParams): Promise<StoragePool> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateStoragePool', params, 'poolId');
    this.ensureParamIsSet('updateStoragePool', params, 'storagePool');

    // Create URL to call
    const url = `${this.basePath}/pool/{poolId}`
      .replace(`{${'poolId'}}`, encodeURIComponent(`${params['poolId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['storagePool'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

