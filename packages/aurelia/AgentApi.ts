/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  Agent,
  ApiToken,
} from './models';

/**
 * createAgent - parameters interface
 */
export interface ICreateAgentParams {
  agent: Agent;
}

/**
 * deleteAgent - parameters interface
 */
export interface IDeleteAgentParams {
  agentId: string;
}

/**
 * listAgents - parameters interface
 */
export interface IListAgentsParams {
}

/**
 * readAgent - parameters interface
 */
export interface IReadAgentParams {
  agentId: string;
}

/**
 * setAgentApiToken - parameters interface
 */
export interface ISetAgentApiTokenParams {
  agentId: string;
  expire?: boolean;
  expirationDate?: string;
}

/**
 * updateAgent - parameters interface
 */
export interface IUpdateAgentParams {
  agentId: string;
  agent: Agent;
}

/**
 * AgentApi - API class
 */
@autoinject()
export class AgentApi extends Api {

  /**
   * Creates a new AgentApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Creates a new Kowabunga remote agent.
   * @param params.agent Agent payload.
   */
  async createAgent(params: ICreateAgentParams): Promise<Agent> {
    // Verify required parameters are set
    this.ensureParamIsSet('createAgent', params, 'agent');

    // Create URL to call
    const url = `${this.basePath}/agent`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['agent'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Deletes an existing Kowabunga remote agent.
   * @param params.agentId The ID of the Kowabunga remote agent.
   */
  async deleteAgent(params: IDeleteAgentParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteAgent', params, 'agentId');

    // Create URL to call
    const url = `${this.basePath}/agent/{agentId}`
      .replace(`{${'agentId'}}`, encodeURIComponent(`${params['agentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of Kowabunga remote agent objects.
   */
  async listAgents(): Promise<Array<string>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/agent`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a Kowabunga remote agent.
   * @param params.agentId The ID of the Kowabunga remote agent.
   */
  async readAgent(params: IReadAgentParams): Promise<Agent> {
    // Verify required parameters are set
    this.ensureParamIsSet('readAgent', params, 'agentId');

    // Create URL to call
    const url = `${this.basePath}/agent/{agentId}`
      .replace(`{${'agentId'}}`, encodeURIComponent(`${params['agentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Performs a Kowabunga remote agent setting of API token (will replace any existing one).
   * @param params.agentId The ID of the Kowabunga remote agent.
   * @param params.expire Whether or not the token should expire.
   * @param params.expirationDate Token\&#39;s expiration date (YYYY-MM-DD format).
   */
  async setAgentApiToken(params: ISetAgentApiTokenParams): Promise<ApiToken> {
    // Verify required parameters are set
    this.ensureParamIsSet('setAgentApiToken', params, 'agentId');

    // Create URL to call
    const url = `${this.basePath}/agent/{agentId}/token`
      .replace(`{${'agentId'}}`, encodeURIComponent(`${params['agentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Set query parameters
      .withParams({ 
        'expire': params['expire'],
        'expiration_date': params['expirationDate'],
      })

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Updates a Kowabunga remote agent configuration.
   * @param params.agentId The ID of the Kowabunga remote agent.
   * @param params.agent Agent payload.
   */
  async updateAgent(params: IUpdateAgentParams): Promise<Agent> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateAgent', params, 'agentId');
    this.ensureParamIsSet('updateAgent', params, 'agent');

    // Create URL to call
    const url = `${this.basePath}/agent/{agentId}`
      .replace(`{${'agentId'}}`, encodeURIComponent(`${params['agentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['agent'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

