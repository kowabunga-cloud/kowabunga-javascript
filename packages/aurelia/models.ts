/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * A network adapter.
 */
export interface Adapter {
  /**
   * The network adapter ID (auto-generated).
   */
  id?: string;
  /**
   * The network adapter name.
   */
  name: string;
  /**
   * The network adapter description.
   */
  description?: string;
  /**
   * The network adapter hardware address (e.g. 00:11:22:33:44:55). Auto-generated if unspecified.
   */
  mac?: string;
  /**
   * The network adapter list of associated IPv4 addresses.
   */
  addresses?: Array<string>;
  /**
   * The network adapter is a reserved adapter (e.g. router), where the same hardware address can be reused over several subnets.
   */
  reserved?: boolean;
}


/**
 * A Kowabunga remote agent.
 */
export interface Agent {
  /**
   * The Kowabunga remote agent ID (auto-generated).
   */
  id?: string;
  /**
   * The Kowabunga remote agent name.
   */
  name: string;
  /**
   * The Kowabunga remote agent description.
   */
  description?: string;
  /**
   * The Kowabunga agent type.
   */
  type: AgentTypeEnum;
}

/**
 * Enum for the type property.
 */
export type AgentTypeEnum = 'Kiwi' | 'Kaktus';


export interface ApiErrorBadRequest {
  status: number;
  error: string;
  reason: string;
}


export interface ApiErrorConflict {
  status: number;
  error: string;
  reason: string;
}


export interface ApiErrorForbidden {
  status: number;
  error: string;
  reason: string;
}


export interface ApiErrorInsufficientResource {
  status: number;
  error: string;
  reason: string;
}


export interface ApiErrorNotFound {
  status: number;
  error: string;
  reason: string;
}


export interface ApiErrorUnauthorized {
  status: number;
  error: string;
  reason: string;
}


export interface ApiErrorUnprocessableEntity {
  status: number;
  error: string;
  reason: string;
}


/**
 * A Kowabunga authentication security token consists of an API key granting access to resources.
 */
export interface ApiToken {
  /**
   * The server-to-server authentication security token ID (auto-generated).
   */
  id?: string;
  /**
   * The server-to-server authentication security token name.
   */
  name: string;
  /**
   * The server-to-server authentication security token description.
   */
  description?: string;
  /**
   * Does the API token expires at some stage ?.
   */
  expire: boolean;
  /**
   * Expiration date of the token (YYYY-MM-DD format).
   */
  expiration_date?: string;
}


/**
 * A resource cost.
 */
export interface Cost {
  /**
   * The unit price information.
   */
  price: number;
  /**
   * The associated currency.
   */
  currency: string;
}


/**
 * A DNS record.
 */
export interface DnsRecord {
  /**
   * The DNS record ID (auto-generated).
   */
  id?: string;
  /**
   * The DNS record name.
   */
  name: string;
  /**
   * The DNS record description.
   */
  description?: string;
  /**
   * The DNS record associated domain (inherited from associated project).
   */
  domain?: string;
  /**
   * A list of IPv4 addresses to be associated to the record.
   */
  addresses: Array<string>;
}


/**
 * A virtual machine instance.
 */
export interface Instance {
  /**
   * The virtual machine instance ID (auto-generated).
   */
  id?: string;
  /**
   * The virtual machine instance name.
   */
  name: string;
  /**
   * The virtual machine instance description.
   */
  description?: string;
  /**
   * The virtual machine instance memory size (in bytes).
   */
  memory: number;
  /**
   * The virtual machine instance number of vCPUs.
   */
  vcpus: number;
  /**
   * a list of existing network adapters to be connected to the instance.
   */
  adapters?: Array<string>;
  /**
   * volumes list of existing storage volumes (i.e. disks) to be connected to the instance.
   */
  volumes?: Array<string>;
}


/**
 * A virtual machine instance remote access characteristics.
 */
export interface InstanceRemoteAccess {
  /**
   * The virtual machine instance remote access URL.
   */
  url: string;
}


/**
 * A virtual machine instance state.
 */
export interface InstanceState {
  /**
   * The virtual machine instance state.
   */
  state: string;
  /**
   * The virtual machine instance reason of the state.
   */
  reason: string;
}


/**
 * A reserved IPv4 addresses pool range, non-addressable by Kowabunga.
 */
export interface IpRange {
  /**
   * The range\'s first IP address.
   */
  first: string;
  /**
   * The range\'s last IP address.
   */
  last: string;
}


/**
 * A Kaktus (Kowabunga Affordable KVM and Tight Underneath Storage) is an hyper-converged infrastructure (HCI) bare-metal node offering computing and distributed storage capabilites.
 */
export interface Kaktus {
  /**
   * The Kaktus computing node ID (auto-generated).
   */
  id?: string;
  /**
   * The Kaktus computing node name.
   */
  name: string;
  /**
   * The Kaktus computing node description.
   */
  description?: string;
  cpu_cost?: Cost;
  memory_cost?: Cost;
  /**
   * The Kaktus node CPU resource over-commit ratio. Overcommitting CPU resources for VMs means allocating more virtual CPUs (vCPUs) to the virtual machines (VMs) than the physical cores available on the node. This can help optimize the utilization of the node CPU and increase the density of VMs per node.
   */
  overcommit_cpu_ratio?: number;
  /**
   * The Kaktus node memory resource over-commit ratio. Memory overcommitment is a concept in computing that covers the assignment of more memory to virtual computing devices (or processes) than the physical machine they are hosted, or running on, actually has.
   */
  overcommit_memory_ratio?: number;
  /**
   * a list of existing remote agents managing the Kaktus node.
   */
  agents: Array<string>;
}


/**
 * A Kaktus computing node CPU characteristics.
 */
export interface KaktusCPU {
  /**
   * The Kaktus computing node CPU architecture.
   */
  arch: string;
  /**
   * The Kaktus computing node CPU model.
   */
  model: string;
  /**
   * The Kaktus computing node CPU vendor.
   */
  vendor: string;
  /**
   * The Kaktus computing node CPU number of sockets.
   */
  sockets: number;
  /**
   * The Kaktus computing node CPU number of cores.
   */
  cores: number;
  /**
   * The Kaktus computing node CPU number of threads.
   */
  threads: number;
}


/**
 * A Kaktus computing node capability.
 */
export interface KaktusCaps {
  cpu: KaktusCPU;
  /**
   * The Kaktus computing node memory size (bytes).
   */
  memory: number;
}


/**
 * A Kawaii (Kowabunga Adapative WAn Intelligent Interface) is a network gateway used for your Internet inbound and outbound traffic.
 */
export interface Kawaii {
  /**
   * The Kawaii ID (auto-generated).
   */
  id?: string;
  /**
   * The Kawaii name.
   */
  name?: string;
  /**
   * The Kawaii description.
   */
  description?: string;
  netip?: KawaiiNetIp;
  firewall?: KawaiiFirewall;
  /**
   * The Kawaii list of NAT forwarding entries. Kawaii will forward public Internet traffic from all public virtual IPs to requested private subnet IP addresses.
   */
  dnat?: Array<KawaiiDNatRule>;
  /**
   * The Kawaii list of Kowabunga private VPC subnet peering entries.
   */
  vpc_peerings?: Array<KawaiiVpcPeering>;
  /**
   * The Kawaii list of Kowabunga IPsec connections.
   */
  ipsec_connections?: Array<KawaiiIpSec>;
}


/**
 * A Kawaii public firewall destination NAT rule.
 */
export interface KawaiiDNatRule {
  /**
   * Target private IP address to forward public traffic to.
   */
  destination: string;
  /**
   * The transport layer protocol to forward public traffic to.
   */
  protocol?: KawaiiDNatRuleProtocolEnum;
  /**
   * The port (or list of ports) to forward public traffic from. Ranges are accepted. Format is a-b,c-d (e.g. 443; 22,80,443; 80,443,3000-3005).
   */
  ports: string;
}

/**
 * Enum for the protocol property.
 */
export type KawaiiDNatRuleProtocolEnum = 'tcp' | 'udp';


/**
 * A Kawaii public firewall settings.
 */
export interface KawaiiFirewall {
  /**
   * The Kawaii public firewall list of ingress rules. Kawaii default policy is to drop all incoming traffic, including ICMP. Specified ruleset will be explicitly accepted.
   */
  ingress?: Array<KawaiiFirewallIngressRule>;
  /**
   * The default public traffic egress policy.
   */
  egress_policy?: KawaiiFirewallEgressPolicyEnum;
  /**
   * The Kawaii public firewall list of egress rules. Kawaii default policy is to accept all outgoing traffic, including ICMP. Specified ruleset will be explicitly dropped if egress_policy is set to accept, and explicitly accepted if egress policy is set to drop..
   */
  egress?: Array<KawaiiFirewallEgressRule>;
}

/**
 * Enum for the egress_policy property.
 */
export type KawaiiFirewallEgressPolicyEnum = 'accept' | 'drop';


/**
 * A Kawaii public firewall egress rule.
 */
export interface KawaiiFirewallEgressRule {
  /**
   * The destination IP or CIDR to accept/drop public traffic to.
   */
  destination?: string;
  /**
   * The transport layer protocol to accept/drop public traffic to.
   */
  protocol?: KawaiiFirewallEgressRuleProtocolEnum;
  /**
   * The port (or list of ports) to accept/drop public traffic from. Ranges are accepted. Format is a-b,c-d (e.g. 443; 22,80,443; 80,443,3000-3005).
   */
  ports: string;
}

/**
 * Enum for the protocol property.
 */
export type KawaiiFirewallEgressRuleProtocolEnum = 'tcp' | 'udp';


/**
 * A Kawaii public firewall ingress rule.
 */
export interface KawaiiFirewallIngressRule {
  /**
   * The source IP or CIDR to accept public traffic from.
   */
  source?: string;
  /**
   * The transport layer protocol to accept public traffic from.
   */
  protocol?: KawaiiFirewallIngressRuleProtocolEnum;
  /**
   * The port (or list of ports) to accept public traffic from. Ranges are accepted. Format is a-b,c-d (e.g. 443; 22,80,443; 80,443,3000-3005).
   */
  ports: string;
}

/**
 * Enum for the protocol property.
 */
export type KawaiiFirewallIngressRuleProtocolEnum = 'tcp' | 'udp';


/**
 * A Kawaii IPsec connection.
 */
export interface KawaiiIpSec {
  /**
   * The Kawaii IPsec connection ID (auto-generated).
   */
  id?: string;
  /**
   * The Kawaii IPsec connection name.
   */
  name: string;
  /**
   * The Kawaii IPsec connection description.
   */
  description?: string;
  /**
   * The Kawaii IPsec connection IPSec IP.
   */
  ip?: string;
  /**
   * The Kawaii IPsec connection remote peer VPN Gateway.
   */
  remote_ip: string;
  /**
   * The Kawaii IPsec connection remote subnet.
   */
  remote_subnet: string;
  /**
   * The Kawaii IPsec connection pre-shared key(PSK).
   */
  pre_shared_key: string;
  /**
   * The Kawaii IPsec connection Dead Peer Detection Action (clear,restart or trap).
   */
  dpd_timeout_action?: KawaiiIpSecDpdTimeoutActionEnum;
  /**
   * The Kawaii IPsec connection Dead Peer Detection Timeout.
   */
  dpd_timeout?: string;
  /**
   * The Kawaii IPsec connection start action (none, start, trap).
   */
  start_action?: KawaiiIpSecStartActionEnum;
  /**
   * The Kawaii IPsec connection rekey time. Default is 2h.
   */
  rekey_time?: string;
  /**
   * The Kawaii IPsec connection Lifetime for phase 1 negociation. Default is 1h.
   */
  phase1_lifetime?: string;
  /**
   * The Kawaii IPsec connection phase 1 Diffie Hellman IANA algorithm.
   */
  phase1_dh_group_number: KawaiiIpSecPhase1DhGroupNumberEnum;
  /**
   * The Kawaii IPsec connection phase 1 integrity algorithm..
   */
  phase1_integrity_algorithm: KawaiiIpSecPhase1IntegrityAlgorithmEnum;
  /**
   * The Kawaii IPsec connection phase 1 encryption algorithm..
   */
  phase1_encryption_algorithm: KawaiiIpSecPhase1EncryptionAlgorithmEnum;
  /**
   * The Kawaii IPsec connection Lifetime for phase 2 negociation. Default is 1h.
   */
  phase2_lifetime?: string;
  /**
   * The Kawaii IPsec connection phase 2 Diffie Hellman IANA algorithm.
   */
  phase2_dh_group_number: KawaiiIpSecPhase2DhGroupNumberEnum;
  /**
   * The Kawaii IPsec connection phase 2 integrity algorithm..
   */
  phase2_integrity_algorithm: KawaiiIpSecPhase2IntegrityAlgorithmEnum;
  /**
   * The Kawaii IPsec connection phase 2 encryption algorithm..
   */
  phase2_encryption_algorithm: KawaiiIpSecPhase2EncryptionAlgorithmEnum;
  firewall?: KawaiiFirewall;
}

/**
 * Enum for the dpd_timeout_action property.
 */
export type KawaiiIpSecDpdTimeoutActionEnum = 'clear' | 'restart' | 'start';

/**
 * Enum for the start_action property.
 */
export type KawaiiIpSecStartActionEnum = 'none' | 'start' | 'trap';

/**
 * Enum for the phase1_dh_group_number property.
 */
export type KawaiiIpSecPhase1DhGroupNumberEnum = '2' | '5' | '14' | '15' | '16' | '17' | '18' | '19' | '20' | '21' | '22' | '23' | '24';

/**
 * Enum for the phase1_integrity_algorithm property.
 */
export type KawaiiIpSecPhase1IntegrityAlgorithmEnum = 'SHA1' | 'SHA256' | 'SHA384' | 'SHA512';

/**
 * Enum for the phase1_encryption_algorithm property.
 */
export type KawaiiIpSecPhase1EncryptionAlgorithmEnum = 'AES128' | 'AES256' | 'CAMELLIA128' | 'CAMELLIA256';

/**
 * Enum for the phase2_dh_group_number property.
 */
export type KawaiiIpSecPhase2DhGroupNumberEnum = '2' | '5' | '14' | '15' | '16' | '17' | '18' | '19' | '20' | '21' | '22' | '23' | '24';

/**
 * Enum for the phase2_integrity_algorithm property.
 */
export type KawaiiIpSecPhase2IntegrityAlgorithmEnum = 'SHA1' | 'SHA256' | 'SHA384' | 'SHA512';

/**
 * Enum for the phase2_encryption_algorithm property.
 */
export type KawaiiIpSecPhase2EncryptionAlgorithmEnum = 'AES128' | 'AES256' | 'CAMELLIA128' | 'CAMELLIA256';


/**
 * A Kawaii Network IP settings.
 */
export interface KawaiiNetIp {
  /**
   * The Kawaii global public gateways virtual IP addresses (read-only).
   */
  _public: Array<string>;
  /**
   * The Kawaii global private gateways virtual IP addresses (read-only).
   */
  _private: Array<string>;
  /**
   * The Kawaii per-zone list of Kowabunga virtual IP addresses.
   */
  zones: Array<KawaiiNetIpZone>;
}


/**
 * A Kawaii Network IP zone settings.
 */
export interface KawaiiNetIpZone {
  /**
   * The Kawaii zone name (read-only).
   */
  zone: string;
  /**
   * The Kawaii zone gateway public virtual IP (read-only).
   */
  _public: string;
  /**
   * The Kawaii zone gateway private virtual IP (read-only).
   */
  _private: string;
}


/**
 * A Kawaii VPC firewall forwarding rule.
 */
export interface KawaiiVpcForwardRule {
  /**
   * The transport layer protocol to forward public traffic to.
   */
  protocol?: KawaiiVpcForwardRuleProtocolEnum;
  /**
   * The port (or list of ports) to forward public traffic from. Ranges are accepted. Format is a-b,c-d (e.g. 443; 22,80,443; 80,443,3000-3005).
   */
  ports: string;
}

/**
 * Enum for the protocol property.
 */
export type KawaiiVpcForwardRuleProtocolEnum = 'tcp' | 'udp';


/**
 * A Kawaii VPC Network IP zone settings.
 */
export interface KawaiiVpcNetIpZone {
  /**
   * The Kawaii zone name (read-only).
   */
  zone: string;
  /**
   * The Kawaii zone gateway private IP address in VPC peered subnet  (read-only).
   */
  _private: string;
}


/**
 * A Kawaii internal VPC subnet peering.
 */
export interface KawaiiVpcPeering {
  /**
   * Kowabunga Subnet ID to be peered with (subnet local IP addresses will be automatically assigned to Kawaii instances)..
   */
  subnet: string;
  /**
   * The default VPC traffic forwarding policy.
   */
  policy?: KawaiiVpcPeeringPolicyEnum;
  /**
   * The firewall list of forwarding ingress rules from VPC peered subnet. ICMP traffic is always accepted. The specified ruleset will be explicitly accepted if drop is the default policy (useless otherwise).
   */
  ingress?: Array<KawaiiVpcForwardRule>;
  /**
   * The firewall list of forwarding egress rules to VPC peered subnet. ICMP traffic is always accepted. The specified ruleset will be explicitly accepted if drop is the default policy (useless otherwise).
   */
  egress?: Array<KawaiiVpcForwardRule>;
  /**
   * The per-zone auto-assigned private IPs in peered subnet (read-only).
   */
  netip?: Array<KawaiiVpcNetIpZone>;
}

/**
 * Enum for the policy property.
 */
export type KawaiiVpcPeeringPolicyEnum = 'accept' | 'drop';


/**
 * A Kiwi (Kowabunga Inner Wan Interface) provides edge-network services..
 */
export interface Kiwi {
  /**
   * The Kiwi (Kowabunga Inner Wan Interface) provides edge-network services. ID (auto-generated).
   */
  id?: string;
  /**
   * The Kiwi (Kowabunga Inner Wan Interface) provides edge-network services. name.
   */
  name: string;
  /**
   * The Kiwi (Kowabunga Inner Wan Interface) provides edge-network services. description.
   */
  description?: string;
  /**
   * a list of existing remote agents managing the network gateway.
   */
  agents?: Array<string>;
}


/**
 * A Kompute is a wrapper object for bare virtual machines. It consists of an instance, one to several attached volumes and 2 network adapters (a private one, a public one). This is the prefered way for creating virtual machines. IP addresses will be automatically assigned.
 */
export interface Kompute {
  /**
   * The Kompute ID (auto-generated).
   */
  id?: string;
  /**
   * The Kompute name.
   */
  name: string;
  /**
   * The Kompute description.
   */
  description?: string;
  /**
   * The Kompute memory size (in bytes).
   */
  memory: number;
  /**
   * The Kompute number of vCPUs.
   */
  vcpus: number;
  /**
   * The Kompute OS disk size (in bytes).
   */
  disk: number;
  /**
   * The Kompute extra data disk size (in bytes). If unspecified, no extra data disk will be assigned.
   */
  data_disk?: number;
  /**
   * The Kompute assigned private IPv4 address (read-only).
   */
  ip?: string;
}


/**
 * A Kowabunga Konvey is a layer-4 network load-balancer used to distribute service requests to associated backend instances.
 */
export interface Konvey {
  /**
   * The Konvey (Kowabunga Network Load-Balancer) ID (auto-generated).
   */
  id?: string;
  /**
   * The Konvey (Kowabunga Network Load-Balancer) name.
   */
  name?: string;
  /**
   * The Konvey (Kowabunga Network Load-Balancer) description.
   */
  description?: string;
  /**
   * The Konvey (Kowabunga Network Load-Balancer) assigned private virtual IP address (read-only).
   */
  vip?: string;
  /**
   * Whether Konvey (Kowabunga Network Load-Balancer) must be deployed in a highly-available replicated state to support service failover.
   */
  failover?: boolean;
  /**
   * The Konvey (Kowabunga Network Load-Balancer) list of load-balanced endpoints.
   */
  endpoints: Array<KonveyEndpoint>;
}


/**
 * A Konvey Backends settings.
 */
export interface KonveyBackends {
  /**
   * The Konvey (Kowabunga Network Load-Balancer) endpoint list of load-balanced backend hosts.
   */
  hosts: Array<string>;
  /**
   * The Konvey (Kowabunga Network Load-Balancer) endpoint backend service port.
   */
  port: number;
}


/**
 * A Konvey Endpoint Service settings.
 */
export interface KonveyEndpoint {
  /**
   * The Konvey (Kowabunga Network Load-Balancer) endpoint name.
   */
  name: string;
  /**
   * The port to be exposed.
   */
  port: number;
  /**
   * The transport layer protocol to be exposed.
   */
  protocol: KonveyEndpointProtocolEnum;
  backends: KonveyBackends;
}

/**
 * Enum for the protocol property.
 */
export type KonveyEndpointProtocolEnum = 'tcp' | 'udp';


/**
 * A Kylo provides an elastic NFS-like remote storage volume.
 */
export interface Kylo {
  /**
   * The Kylo ID (auto-generated).
   */
  id?: string;
  /**
   * The Kylo name.
   */
  name: string;
  /**
   * The Kylo description.
   */
  description?: string;
  /**
   * The Kylo volume access type.
   */
  access?: KyloAccessEnum;
  /**
   * The Kylo NFS protocol versions to be supported.
   */
  protocols?: Array<KyloProtocolsEnum>;
  /**
   * The Kylo endpoint FQDN (read-only).
   */
  endpoint?: string;
  /**
   * The Kylo volume bytes used (read-only).
   */
  size?: number;
}

/**
 * Enum for the access property.
 */
export type KyloAccessEnum = 'RO' | 'RW';

/**
 * Enum for the protocols property.
 */
export type KyloProtocolsEnum = '3' | '4';


/**
 * A key/value metadata.
 */
export interface Metadata {
  /**
   * The metadata key.
   */
  key: string;
  /**
   * The metadata value.
   */
  value: string;
}


/**
 * A user plain-text password.
 */
export interface Password {
  /**
   * The plain-text password.
   */
  value: string;
}


/**
 * A Kowabunga project corresponds to a single tenant, isolated set of resources.
 */
export interface Project {
  /**
   * The project ID (auto-generated).
   */
  id?: string;
  /**
   * The project name.
   */
  name: string;
  /**
   * The project description.
   */
  description?: string;
  /**
   * Internal domain name (e.g. myproject.acme.com).
   */
  domain?: string;
  /**
   * Default root password, set at cloud-init instance bootstrap phase. Will be randomly auto-generated at each instance creation if unspecified.
   */
  root_password?: string;
  /**
   * Default service user name, created at cloud-init instance bootstrap phase. Will use Kowabunga\'s default configuration one if unspecified.
   */
  bootstrap_user?: string;
  /**
   * Default public SSH key, to be associated to bootstrap user. Will use Kowabunga\'s default configuration one if unspecified.
   */
  bootstrap_pubkey?: string;
  /**
   * A list of tags to be associated to the project.
   */
  tags?: Array<string>;
  /**
   * A list of metadata to be associated to the project.
   */
  metadatas?: Array<Metadata>;
  quotas?: ProjectResources;
  /**
   * The assigned project VPC private subnets IDs (read-only).
   */
  private_subnets?: Array<RegionSubnet>;
  /**
   * The list of VRRP IDs used by -as-a-service resources within the project virtual network (read-only). Should your application use VRRP for service redundancy, you should use different IDs to prevent issues..
   */
  reserved_vrrp_ids?: Array<number>;
  /**
   * A list of user teams allowed to administrate the project (i.e. capable of managing internal resources).
   */
  teams: Array<string>;
  /**
   * A list of Kowabunga regions the project is managing resources from.
   */
  regions: Array<string>;
}


/**
 * A global project resource quotas/usage (0 for unlimited).
 */
export interface ProjectResources {
  /**
   * The maximum total number of vCPUs allowed to be consumed by sum of all instances.
   */
  vcpus?: number;
  /**
   * The maximum total memory (in bytes) allowed to be consumed by sum of all instances.
   */
  memory?: number;
  /**
   * The maximum total disk capacity allowed to be consumed by sum of all instances.
   */
  storage?: number;
  /**
   * The maximum number of instances allowed to be spawned.
   */
  instances?: number;
}


/**
 * A region.
 */
export interface Region {
  /**
   * The region ID (auto-generated).
   */
  id?: string;
  /**
   * The region name.
   */
  name: string;
  /**
   * The region description.
   */
  description?: string;
}


/**
 * A region/subnet map.
 */
export interface RegionSubnet {
  /**
   * The region key.
   */
  key?: string;
  /**
   * The subnet ID.
   */
  value?: string;
}


/**
 * A NFS storage.
 */
export interface StorageNFS {
  /**
   * The NFS storage ID (auto-generated).
   */
  id?: string;
  /**
   * The NFS storage name.
   */
  name: string;
  /**
   * The NFS storage description.
   */
  description?: string;
  /**
   * The associated NFS endpoint FQDN.
   */
  endpoint: string;
  /**
   * The underlying associated Ceph volume name.
   */
  fs?: string;
  /**
   * List of NFS Ganesha API server IP addresses.
   */
  backends?: Array<string>;
  /**
   * NFS Ganesha API server port (default 54934).
   */
  port?: number;
}


/**
 * A storage pool.
 */
export interface StoragePool {
  /**
   * The storage pool ID (auto-generated).
   */
  id?: string;
  /**
   * The storage pool name.
   */
  name: string;
  /**
   * The storage pool description.
   */
  description?: string;
  /**
   * Ceph pool name.
   */
  pool: string;
  /**
   * Ceph Monitor(s) address or FQDN.
   */
  ceph_address?: string;
  /**
   * Ceph Monitor(s) port (default 3300).
   */
  ceph_port?: number;
  /**
   * The libvirt secret UUID for CephX authentication.
   */
  ceph_secret_uuid?: string;
  cost?: Cost;
  /**
   * a list of existing remote agents managing the storage pool.
   */
  agents: Array<string>;
}


/**
 * A network subnet.
 */
export interface Subnet {
  /**
   * The network subnet ID (auto-generated).
   */
  id?: string;
  /**
   * The network subnet name.
   */
  name: string;
  /**
   * The network subnet description.
   */
  description?: string;
  /**
   * The network subnet CIDR (e.g. 192.168.0.0/24).
   */
  cidr: string;
  /**
   * The network subnet router/gateway IP address (e.g. 192.168.0.254).
   */
  gateway: string;
  /**
   * The network subnet DNS server IP address (gateway value if unspecified).
   */
  dns?: string;
  /**
   * The list of extra routes to be access through designated gateway (format is 10.0.0.0/8).
   */
  extra_routes?: Array<string>;
  /**
   * The network subnet reserved IPv4 ranges (i.e. no IP address can be assigned from there).
   */
  reserved?: Array<IpRange>;
  /**
   * The network subnet IPv4 ranges reserved for per-zone local network gateways (range size must be at least equal to region number of zones).
   */
  gw_pool?: Array<IpRange>;
  /**
   * Optional application service type.
   */
  application?: SubnetApplicationEnum;
}

/**
 * Enum for the application property.
 */
export type SubnetApplicationEnum = 'ceph' | 'user';


/**
 * A Kowabunga users team.
 */
export interface Team {
  /**
   * The Kowabunga users team ID (auto-generated).
   */
  id?: string;
  /**
   * The Kowabunga users team name.
   */
  name: string;
  /**
   * The Kowabunga users team description.
   */
  description?: string;
  /**
   * List of user IDs that are part of the team.
   */
  users: Array<string>;
}


/**
 * A image template.
 */
export interface Template {
  /**
   * The image template ID (auto-generated).
   */
  id?: string;
  /**
   * The image template name.
   */
  name: string;
  /**
   * The image template description.
   */
  description?: string;
  /**
   * Type of operating system if OS kind (useful to determine cloud-init parameters for instance).
   */
  os?: TemplateOsEnum;
  /**
   * HTTP(s) source URL of the KVM-ready OS image.
   */
  source: string;
}

/**
 * Enum for the os property.
 */
export type TemplateOsEnum = 'linux' | 'windows';


/**
 * A Kowabunga user.
 */
export interface User {
  /**
   * The Kowabunga user ID (auto-generated).
   */
  id?: string;
  /**
   * The Kowabunga user name.
   */
  name: string;
  /**
   * The Kowabunga user description.
   */
  description?: string;
  /**
   * User email address.
   */
  email: string;
  /**
   * The Kowabunga user role.
   */
  role: UserRoleEnum;
  /**
   * Whether or not to receive email notifications on events.
   */
  notifications?: boolean;
}

/**
 * Enum for the role property.
 */
export type UserRoleEnum = 'superAdmin' | 'projectAdmin' | 'user';


/**
 * A Kowabunga user login credentials.
 */
export interface UserCredentials {
  /**
   * The user email address for login.
   */
  email: string;
  /**
   * The user password for login.
   */
  password: string;
  /**
   * The resulting server-generated JWT token for Bearer Authentication (read-only).
   */
  jwt?: string;
}


/**
 * A Kowabunga user email.
 */
export interface UserEmail {
  /**
   * The user email address used for login.
   */
  email: string;
}


/**
 * A virtual network.
 */
export interface VNet {
  /**
   * The virtual network ID (auto-generated).
   */
  id?: string;
  /**
   * The virtual network name.
   */
  name: string;
  /**
   * The virtual network description.
   */
  description?: string;
  /**
   * The VLAN identifier (0 if unspecified).
   */
  vlan?: number;
  /**
   * The libvirt\'s bridge network interface (brX).
   */
  _interface: string;
  /**
   * Is the virtual network adapter connected to private (LAN) or public (WAN) physical network ?.
   */
  _private?: boolean;
}


/**
 * A storage volume.
 */
export interface Volume {
  /**
   * The storage volume ID (auto-generated).
   */
  id?: string;
  /**
   * The storage volume name.
   */
  name: string;
  /**
   * The storage volume description.
   */
  description?: string;
  /**
   * The storage volume type.
   */
  type: VolumeTypeEnum;
  /**
   * The storage volume size (in bytes).
   */
  size: number;
}

/**
 * Enum for the type property.
 */
export type VolumeTypeEnum = 'os' | 'iso' | 'raw';


/**
 * A availability zone.
 */
export interface Zone {
  /**
   * The availability zone ID (auto-generated).
   */
  id?: string;
  /**
   * The availability zone name.
   */
  name: string;
  /**
   * The availability zone description.
   */
  description?: string;
}

