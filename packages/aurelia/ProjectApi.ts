/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  Project,
  Kylo,
  Volume,
  Instance,
  Kawaii,
  Konvey,
  DnsRecord,
  Cost,
  Kompute,
  ProjectResources,
} from './models';

/**
 * createProject - parameters interface
 */
export interface ICreateProjectParams {
  project: Project;
  subnetSize?: number;
}

/**
 * createProjectDnsRecord - parameters interface
 */
export interface ICreateProjectDnsRecordParams {
  projectId: string;
  dnsRecord: DnsRecord;
}

/**
 * createProjectRegionKawaii - parameters interface
 */
export interface ICreateProjectRegionKawaiiParams {
  projectId: string;
  regionId: string;
  kawaii: Kawaii;
}

/**
 * createProjectRegionKonvey - parameters interface
 */
export interface ICreateProjectRegionKonveyParams {
  projectId: string;
  regionId: string;
  konvey: Konvey;
}

/**
 * createProjectRegionKylo - parameters interface
 */
export interface ICreateProjectRegionKyloParams {
  projectId: string;
  regionId: string;
  kylo: Kylo;
  nfsId?: string;
}

/**
 * createProjectRegionVolume - parameters interface
 */
export interface ICreateProjectRegionVolumeParams {
  projectId: string;
  regionId: string;
  volume: Volume;
  poolId?: string;
  templateId?: string;
}

/**
 * createProjectZoneInstance - parameters interface
 */
export interface ICreateProjectZoneInstanceParams {
  projectId: string;
  zoneId: string;
  instance: Instance;
}

/**
 * createProjectZoneKompute - parameters interface
 */
export interface ICreateProjectZoneKomputeParams {
  projectId: string;
  zoneId: string;
  kompute: Kompute;
  poolId?: string;
  templateId?: string;
  _public?: boolean;
}

/**
 * createProjectZoneKonvey - parameters interface
 */
export interface ICreateProjectZoneKonveyParams {
  projectId: string;
  zoneId: string;
  konvey: Konvey;
}

/**
 * deleteProject - parameters interface
 */
export interface IDeleteProjectParams {
  projectId: string;
}

/**
 * listProjectDnsRecords - parameters interface
 */
export interface IListProjectDnsRecordsParams {
  projectId: string;
}

/**
 * listProjectRegionKawaiis - parameters interface
 */
export interface IListProjectRegionKawaiisParams {
  projectId: string;
  regionId: string;
}

/**
 * listProjectRegionKonveys - parameters interface
 */
export interface IListProjectRegionKonveysParams {
  projectId: string;
  regionId: string;
}

/**
 * listProjectRegionKylos - parameters interface
 */
export interface IListProjectRegionKylosParams {
  projectId: string;
  regionId: string;
  nfsId?: string;
}

/**
 * listProjectRegionVolumes - parameters interface
 */
export interface IListProjectRegionVolumesParams {
  projectId: string;
  regionId: string;
}

/**
 * listProjectZoneInstances - parameters interface
 */
export interface IListProjectZoneInstancesParams {
  projectId: string;
  zoneId: string;
}

/**
 * listProjectZoneKomputes - parameters interface
 */
export interface IListProjectZoneKomputesParams {
  projectId: string;
  zoneId: string;
}

/**
 * listProjectZoneKonveys - parameters interface
 */
export interface IListProjectZoneKonveysParams {
  projectId: string;
  zoneId: string;
}

/**
 * listProjects - parameters interface
 */
export interface IListProjectsParams {
  subnetSize?: number;
}

/**
 * readProject - parameters interface
 */
export interface IReadProjectParams {
  projectId: string;
}

/**
 * readProjectCost - parameters interface
 */
export interface IReadProjectCostParams {
  projectId: string;
}

/**
 * readProjectUsage - parameters interface
 */
export interface IReadProjectUsageParams {
  projectId: string;
}

/**
 * updateProject - parameters interface
 */
export interface IUpdateProjectParams {
  projectId: string;
  project: Project;
}

/**
 * ProjectApi - API class
 */
@autoinject()
export class ProjectApi extends Api {

  /**
   * Creates a new ProjectApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Creates a new project.
   * @param params.project Project payload.
   * @param params.subnetSize The minimum VPC subnet size to be affected to the project. WARNING, this cannot be changed later.
   */
  async createProject(params: ICreateProjectParams): Promise<Project> {
    // Verify required parameters are set
    this.ensureParamIsSet('createProject', params, 'project');

    // Create URL to call
    const url = `${this.basePath}/project`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'subnetSize': params['subnetSize'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['project'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new DNS record.
   * @param params.projectId The ID of the project.
   * @param params.dnsRecord DnsRecord payload.
   */
  async createProjectDnsRecord(params: ICreateProjectDnsRecordParams): Promise<DnsRecord> {
    // Verify required parameters are set
    this.ensureParamIsSet('createProjectDnsRecord', params, 'projectId');
    this.ensureParamIsSet('createProjectDnsRecord', params, 'dnsRecord');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/record`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['dnsRecord'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new Kawaii.
   * @param params.projectId The ID of the project.
   * @param params.regionId The ID of the region.
   * @param params.kawaii Kawaii payload.
   */
  async createProjectRegionKawaii(params: ICreateProjectRegionKawaiiParams): Promise<Kawaii> {
    // Verify required parameters are set
    this.ensureParamIsSet('createProjectRegionKawaii', params, 'projectId');
    this.ensureParamIsSet('createProjectRegionKawaii', params, 'regionId');
    this.ensureParamIsSet('createProjectRegionKawaii', params, 'kawaii');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/region/{regionId}/kawaii`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['kawaii'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new Konvey (Kowabunga Network Load-Balancer).
   * @param params.projectId The ID of the project.
   * @param params.regionId The ID of the region.
   * @param params.konvey Konvey payload.
   */
  async createProjectRegionKonvey(params: ICreateProjectRegionKonveyParams): Promise<Konvey> {
    // Verify required parameters are set
    this.ensureParamIsSet('createProjectRegionKonvey', params, 'projectId');
    this.ensureParamIsSet('createProjectRegionKonvey', params, 'regionId');
    this.ensureParamIsSet('createProjectRegionKonvey', params, 'konvey');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/region/{regionId}/konvey`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['konvey'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new Kylo.
   * @param params.projectId The ID of the project.
   * @param params.regionId The ID of the region.
   * @param params.kylo Kylo payload.
   * @param params.nfsId NFS storage ID (optional, region\&#39;s default if unspecified).
   */
  async createProjectRegionKylo(params: ICreateProjectRegionKyloParams): Promise<Kylo> {
    // Verify required parameters are set
    this.ensureParamIsSet('createProjectRegionKylo', params, 'projectId');
    this.ensureParamIsSet('createProjectRegionKylo', params, 'regionId');
    this.ensureParamIsSet('createProjectRegionKylo', params, 'kylo');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/region/{regionId}/kylo`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'nfsId': params['nfsId'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['kylo'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new storage volume.
   * @param params.projectId The ID of the project.
   * @param params.regionId The ID of the region.
   * @param params.volume Volume payload.
   * @param params.poolId Storage pool ID (optional, region\&#39;s default if unspecified).
   * @param params.templateId Template to clone the storage volume from (optional, region\&#39;s default if unspecified).
   */
  async createProjectRegionVolume(params: ICreateProjectRegionVolumeParams): Promise<Volume> {
    // Verify required parameters are set
    this.ensureParamIsSet('createProjectRegionVolume', params, 'projectId');
    this.ensureParamIsSet('createProjectRegionVolume', params, 'regionId');
    this.ensureParamIsSet('createProjectRegionVolume', params, 'volume');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/region/{regionId}/volume`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'poolId': params['poolId'],
        'templateId': params['templateId'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['volume'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new virtual machine instance.
   * @param params.projectId The ID of the project.
   * @param params.zoneId The ID of the availability zone.
   * @param params.instance Instance payload.
   */
  async createProjectZoneInstance(params: ICreateProjectZoneInstanceParams): Promise<Instance> {
    // Verify required parameters are set
    this.ensureParamIsSet('createProjectZoneInstance', params, 'projectId');
    this.ensureParamIsSet('createProjectZoneInstance', params, 'zoneId');
    this.ensureParamIsSet('createProjectZoneInstance', params, 'instance');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/zone/{zoneId}/instance`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'zoneId'}}`, encodeURIComponent(`${params['zoneId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['instance'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new Kompute.
   * @param params.projectId The ID of the project.
   * @param params.zoneId The ID of the availability zone.
   * @param params.kompute Kompute payload.
   * @param params.poolId Storage pool ID (optional, region\&#39;s default if unspecified).
   * @param params.templateId Template to clone the storage volume from (optional, region\&#39;s default if unspecified).
   * @param params._public Should Kompute be exposed over public Internet ? (a public IPv4 address will then be auto-assigned, default to false).
   */
  async createProjectZoneKompute(params: ICreateProjectZoneKomputeParams): Promise<Kompute> {
    // Verify required parameters are set
    this.ensureParamIsSet('createProjectZoneKompute', params, 'projectId');
    this.ensureParamIsSet('createProjectZoneKompute', params, 'zoneId');
    this.ensureParamIsSet('createProjectZoneKompute', params, 'kompute');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/zone/{zoneId}/kompute`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'zoneId'}}`, encodeURIComponent(`${params['zoneId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'poolId': params['poolId'],
        'templateId': params['templateId'],
        'public': params['_public'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['kompute'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new Konvey (Kowabunga Network Load-Balancer).
   * @param params.projectId The ID of the project.
   * @param params.zoneId The ID of the availability zone.
   * @param params.konvey Konvey payload.
   */
  async createProjectZoneKonvey(params: ICreateProjectZoneKonveyParams): Promise<Konvey> {
    // Verify required parameters are set
    this.ensureParamIsSet('createProjectZoneKonvey', params, 'projectId');
    this.ensureParamIsSet('createProjectZoneKonvey', params, 'zoneId');
    this.ensureParamIsSet('createProjectZoneKonvey', params, 'konvey');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/zone/{zoneId}/konvey`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'zoneId'}}`, encodeURIComponent(`${params['zoneId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['konvey'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Deletes an existing project.
   * @param params.projectId The ID of the project.
   */
  async deleteProject(params: IDeleteProjectParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteProject', params, 'projectId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of DNS record objects.
   * @param params.projectId The ID of the project.
   */
  async listProjectDnsRecords(params: IListProjectDnsRecordsParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listProjectDnsRecords', params, 'projectId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/records`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of Kawaii objects.
   * @param params.projectId The ID of the project.
   * @param params.regionId The ID of the region.
   */
  async listProjectRegionKawaiis(params: IListProjectRegionKawaiisParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listProjectRegionKawaiis', params, 'projectId');
    this.ensureParamIsSet('listProjectRegionKawaiis', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/region/{regionId}/kawaiis`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of Konvey (Kowabunga Network Load-Balancer) objects.
   * @param params.projectId The ID of the project.
   * @param params.regionId The ID of the region.
   */
  async listProjectRegionKonveys(params: IListProjectRegionKonveysParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listProjectRegionKonveys', params, 'projectId');
    this.ensureParamIsSet('listProjectRegionKonveys', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/region/{regionId}/konveys`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of Kylo objects.
   * @param params.projectId The ID of the project.
   * @param params.regionId The ID of the region.
   * @param params.nfsId NFS storage ID (optional, region\&#39;s default if unspecified).
   */
  async listProjectRegionKylos(params: IListProjectRegionKylosParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listProjectRegionKylos', params, 'projectId');
    this.ensureParamIsSet('listProjectRegionKylos', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/region/{regionId}/kylo`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'nfsId': params['nfsId'],
      })

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of storage volume objects.
   * @param params.projectId The ID of the project.
   * @param params.regionId The ID of the region.
   */
  async listProjectRegionVolumes(params: IListProjectRegionVolumesParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listProjectRegionVolumes', params, 'projectId');
    this.ensureParamIsSet('listProjectRegionVolumes', params, 'regionId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/region/{regionId}/volumes`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'regionId'}}`, encodeURIComponent(`${params['regionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of virtual machine instance objects.
   * @param params.projectId The ID of the project.
   * @param params.zoneId The ID of the availability zone.
   */
  async listProjectZoneInstances(params: IListProjectZoneInstancesParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listProjectZoneInstances', params, 'projectId');
    this.ensureParamIsSet('listProjectZoneInstances', params, 'zoneId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/zone/{zoneId}/instances`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'zoneId'}}`, encodeURIComponent(`${params['zoneId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of Kompute objects.
   * @param params.projectId The ID of the project.
   * @param params.zoneId The ID of the availability zone.
   */
  async listProjectZoneKomputes(params: IListProjectZoneKomputesParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listProjectZoneKomputes', params, 'projectId');
    this.ensureParamIsSet('listProjectZoneKomputes', params, 'zoneId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/zone/{zoneId}/komputes`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'zoneId'}}`, encodeURIComponent(`${params['zoneId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of Konvey (Kowabunga Network Load-Balancer) objects.
   * @param params.projectId The ID of the project.
   * @param params.zoneId The ID of the availability zone.
   */
  async listProjectZoneKonveys(params: IListProjectZoneKonveysParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('listProjectZoneKonveys', params, 'projectId');
    this.ensureParamIsSet('listProjectZoneKonveys', params, 'zoneId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/zone/{zoneId}/konveys`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`))
      .replace(`{${'zoneId'}}`, encodeURIComponent(`${params['zoneId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the IDs of project objects.
   * @param params.subnetSize The minimum VPC subnet size to be affected to the project. WARNING, this cannot be changed later.
   */
  async listProjects(params: IListProjectsParams): Promise<Array<string>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/project`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'subnetSize': params['subnetSize'],
      })

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a project.
   * @param params.projectId The ID of the project.
   */
  async readProject(params: IReadProjectParams): Promise<Project> {
    // Verify required parameters are set
    this.ensureParamIsSet('readProject', params, 'projectId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a resource cost.
   * @param params.projectId The ID of the project.
   */
  async readProjectCost(params: IReadProjectCostParams): Promise<Cost> {
    // Verify required parameters are set
    this.ensureParamIsSet('readProjectCost', params, 'projectId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/cost`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a global project resource quotas/usage (0 for unlimited).
   * @param params.projectId The ID of the project.
   */
  async readProjectUsage(params: IReadProjectUsageParams): Promise<ProjectResources> {
    // Verify required parameters are set
    this.ensureParamIsSet('readProjectUsage', params, 'projectId');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}/usage`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Updates a project configuration.
   * @param params.projectId The ID of the project.
   * @param params.project Project payload.
   */
  async updateProject(params: IUpdateProjectParams): Promise<Project> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateProject', params, 'projectId');
    this.ensureParamIsSet('updateProject', params, 'project');

    // Create URL to call
    const url = `${this.basePath}/project/{projectId}`
      .replace(`{${'projectId'}}`, encodeURIComponent(`${params['projectId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['project'] || {}))

      // Authentication 'ApiKeyAuth' required
      .withHeader('X-API-Key', this.authStorage.getApiKeyAuth())
      // Authentication 'BearerAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

