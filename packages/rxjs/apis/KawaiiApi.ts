// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Kawaii,
    KawaiiIpSec,
} from '../models';

export interface CreateKawaiiIpSecRequest {
    kawaiiId: string;
    kawaiiIpSec: KawaiiIpSec;
}

export interface DeleteKawaiiRequest {
    kawaiiId: string;
}

export interface DeleteKawaiiIpSecRequest {
    kawaiiId: string;
    kawaiiIpSecId: string;
}

export interface ListKawaiiIpSecsRequest {
    kawaiiId: string;
}

export interface ReadKawaiiRequest {
    kawaiiId: string;
}

export interface ReadKawaiiIpSecRequest {
    kawaiiId: string;
    kawaiiIpSecId: string;
}

export interface UpdateKawaiiRequest {
    kawaiiId: string;
    kawaii: Kawaii;
}

export interface UpdateKawaiiIpSecRequest {
    kawaiiId: string;
    kawaiiIpSecId: string;
    kawaiiIpSec: KawaiiIpSec;
}

/**
 * no description
 */
export class KawaiiApi extends BaseAPI {

    /**
     * Creates a new Kawaii IPsec connection.
     */
    createKawaiiIpSec({ kawaiiId, kawaiiIpSec }: CreateKawaiiIpSecRequest): Observable<KawaiiIpSec>
    createKawaiiIpSec({ kawaiiId, kawaiiIpSec }: CreateKawaiiIpSecRequest, opts?: OperationOpts): Observable<AjaxResponse<KawaiiIpSec>>
    createKawaiiIpSec({ kawaiiId, kawaiiIpSec }: CreateKawaiiIpSecRequest, opts?: OperationOpts): Observable<KawaiiIpSec | AjaxResponse<KawaiiIpSec>> {
        throwIfNullOrUndefined(kawaiiId, 'kawaiiId', 'createKawaiiIpSec');
        throwIfNullOrUndefined(kawaiiIpSec, 'kawaiiIpSec', 'createKawaiiIpSec');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<KawaiiIpSec>({
            url: '/kawaii/{kawaiiId}/ipsec'.replace('{kawaiiId}', encodeURI(kawaiiId)),
            method: 'POST',
            headers,
            body: kawaiiIpSec,
        }, opts?.responseOpts);
    };

    /**
     * Deletes an existing Kawaii.
     */
    deleteKawaii({ kawaiiId }: DeleteKawaiiRequest): Observable<void>
    deleteKawaii({ kawaiiId }: DeleteKawaiiRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteKawaii({ kawaiiId }: DeleteKawaiiRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(kawaiiId, 'kawaiiId', 'deleteKawaii');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/kawaii/{kawaiiId}'.replace('{kawaiiId}', encodeURI(kawaiiId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Deletes an existing Kawaii IPsec connection.
     */
    deleteKawaiiIpSec({ kawaiiId, kawaiiIpSecId }: DeleteKawaiiIpSecRequest): Observable<void>
    deleteKawaiiIpSec({ kawaiiId, kawaiiIpSecId }: DeleteKawaiiIpSecRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteKawaiiIpSec({ kawaiiId, kawaiiIpSecId }: DeleteKawaiiIpSecRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(kawaiiId, 'kawaiiId', 'deleteKawaiiIpSec');
        throwIfNullOrUndefined(kawaiiIpSecId, 'kawaiiIpSecId', 'deleteKawaiiIpSec');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/kawaii/{kawaiiId}/ipsec/{KawaiiIpSecId}'.replace('{kawaiiId}', encodeURI(kawaiiId)).replace('{KawaiiIpSecId}', encodeURI(kawaiiIpSecId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kawaii IPsec connection objects.
     */
    listKawaiiIpSecs({ kawaiiId }: ListKawaiiIpSecsRequest): Observable<Array<string>>
    listKawaiiIpSecs({ kawaiiId }: ListKawaiiIpSecsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listKawaiiIpSecs({ kawaiiId }: ListKawaiiIpSecsRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(kawaiiId, 'kawaiiId', 'listKawaiiIpSecs');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/kawaii/{kawaiiId}/ipsec'.replace('{kawaiiId}', encodeURI(kawaiiId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kawaii objects.
     */
    listKawaiis(): Observable<Array<string>>
    listKawaiis(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listKawaiis(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/kawaii',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a Kawaii.
     */
    readKawaii({ kawaiiId }: ReadKawaiiRequest): Observable<Kawaii>
    readKawaii({ kawaiiId }: ReadKawaiiRequest, opts?: OperationOpts): Observable<AjaxResponse<Kawaii>>
    readKawaii({ kawaiiId }: ReadKawaiiRequest, opts?: OperationOpts): Observable<Kawaii | AjaxResponse<Kawaii>> {
        throwIfNullOrUndefined(kawaiiId, 'kawaiiId', 'readKawaii');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kawaii>({
            url: '/kawaii/{kawaiiId}'.replace('{kawaiiId}', encodeURI(kawaiiId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a Kawaii IPsec connection.
     */
    readKawaiiIpSec({ kawaiiId, kawaiiIpSecId }: ReadKawaiiIpSecRequest): Observable<KawaiiIpSec>
    readKawaiiIpSec({ kawaiiId, kawaiiIpSecId }: ReadKawaiiIpSecRequest, opts?: OperationOpts): Observable<AjaxResponse<KawaiiIpSec>>
    readKawaiiIpSec({ kawaiiId, kawaiiIpSecId }: ReadKawaiiIpSecRequest, opts?: OperationOpts): Observable<KawaiiIpSec | AjaxResponse<KawaiiIpSec>> {
        throwIfNullOrUndefined(kawaiiId, 'kawaiiId', 'readKawaiiIpSec');
        throwIfNullOrUndefined(kawaiiIpSecId, 'kawaiiIpSecId', 'readKawaiiIpSec');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<KawaiiIpSec>({
            url: '/kawaii/{kawaiiId}/ipsec/{KawaiiIpSecId}'.replace('{kawaiiId}', encodeURI(kawaiiId)).replace('{KawaiiIpSecId}', encodeURI(kawaiiIpSecId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a Kawaii configuration.
     */
    updateKawaii({ kawaiiId, kawaii }: UpdateKawaiiRequest): Observable<Kawaii>
    updateKawaii({ kawaiiId, kawaii }: UpdateKawaiiRequest, opts?: OperationOpts): Observable<AjaxResponse<Kawaii>>
    updateKawaii({ kawaiiId, kawaii }: UpdateKawaiiRequest, opts?: OperationOpts): Observable<Kawaii | AjaxResponse<Kawaii>> {
        throwIfNullOrUndefined(kawaiiId, 'kawaiiId', 'updateKawaii');
        throwIfNullOrUndefined(kawaii, 'kawaii', 'updateKawaii');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kawaii>({
            url: '/kawaii/{kawaiiId}'.replace('{kawaiiId}', encodeURI(kawaiiId)),
            method: 'PUT',
            headers,
            body: kawaii,
        }, opts?.responseOpts);
    };

    /**
     * Updates a Kawaii IPsec connection configuration.
     */
    updateKawaiiIpSec({ kawaiiId, kawaiiIpSecId, kawaiiIpSec }: UpdateKawaiiIpSecRequest): Observable<KawaiiIpSec>
    updateKawaiiIpSec({ kawaiiId, kawaiiIpSecId, kawaiiIpSec }: UpdateKawaiiIpSecRequest, opts?: OperationOpts): Observable<AjaxResponse<KawaiiIpSec>>
    updateKawaiiIpSec({ kawaiiId, kawaiiIpSecId, kawaiiIpSec }: UpdateKawaiiIpSecRequest, opts?: OperationOpts): Observable<KawaiiIpSec | AjaxResponse<KawaiiIpSec>> {
        throwIfNullOrUndefined(kawaiiId, 'kawaiiId', 'updateKawaiiIpSec');
        throwIfNullOrUndefined(kawaiiIpSecId, 'kawaiiIpSecId', 'updateKawaiiIpSec');
        throwIfNullOrUndefined(kawaiiIpSec, 'kawaiiIpSec', 'updateKawaiiIpSec');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<KawaiiIpSec>({
            url: '/kawaii/{kawaiiId}/ipsec/{KawaiiIpSecId}'.replace('{kawaiiId}', encodeURI(kawaiiId)).replace('{KawaiiIpSecId}', encodeURI(kawaiiIpSecId)),
            method: 'PUT',
            headers,
            body: kawaiiIpSec,
        }, opts?.responseOpts);
    };

}
