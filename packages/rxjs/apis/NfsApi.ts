// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    StorageNFS,
} from '../models';

export interface DeleteStorageNFSRequest {
    nfsId: string;
}

export interface ListStorageNFSKylosRequest {
    nfsId: string;
}

export interface ReadStorageNFSRequest {
    nfsId: string;
}

export interface UpdateStorageNFSRequest {
    nfsId: string;
    storageNFS: StorageNFS;
}

/**
 * no description
 */
export class NfsApi extends BaseAPI {

    /**
     * Deletes an existing NFS storage.
     */
    deleteStorageNFS({ nfsId }: DeleteStorageNFSRequest): Observable<void>
    deleteStorageNFS({ nfsId }: DeleteStorageNFSRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteStorageNFS({ nfsId }: DeleteStorageNFSRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(nfsId, 'nfsId', 'deleteStorageNFS');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/nfs/{nfsId}'.replace('{nfsId}', encodeURI(nfsId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kylo objects.
     */
    listStorageNFSKylos({ nfsId }: ListStorageNFSKylosRequest): Observable<Array<string>>
    listStorageNFSKylos({ nfsId }: ListStorageNFSKylosRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listStorageNFSKylos({ nfsId }: ListStorageNFSKylosRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(nfsId, 'nfsId', 'listStorageNFSKylos');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/nfs/{nfsId}/kylo'.replace('{nfsId}', encodeURI(nfsId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of NFS storage objects.
     */
    listStorageNFSs(): Observable<Array<string>>
    listStorageNFSs(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listStorageNFSs(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/nfs',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a NFS storage.
     */
    readStorageNFS({ nfsId }: ReadStorageNFSRequest): Observable<StorageNFS>
    readStorageNFS({ nfsId }: ReadStorageNFSRequest, opts?: OperationOpts): Observable<AjaxResponse<StorageNFS>>
    readStorageNFS({ nfsId }: ReadStorageNFSRequest, opts?: OperationOpts): Observable<StorageNFS | AjaxResponse<StorageNFS>> {
        throwIfNullOrUndefined(nfsId, 'nfsId', 'readStorageNFS');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<StorageNFS>({
            url: '/nfs/{nfsId}'.replace('{nfsId}', encodeURI(nfsId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a NFS storage configuration.
     */
    updateStorageNFS({ nfsId, storageNFS }: UpdateStorageNFSRequest): Observable<StorageNFS>
    updateStorageNFS({ nfsId, storageNFS }: UpdateStorageNFSRequest, opts?: OperationOpts): Observable<AjaxResponse<StorageNFS>>
    updateStorageNFS({ nfsId, storageNFS }: UpdateStorageNFSRequest, opts?: OperationOpts): Observable<StorageNFS | AjaxResponse<StorageNFS>> {
        throwIfNullOrUndefined(nfsId, 'nfsId', 'updateStorageNFS');
        throwIfNullOrUndefined(storageNFS, 'storageNFS', 'updateStorageNFS');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<StorageNFS>({
            url: '/nfs/{nfsId}'.replace('{nfsId}', encodeURI(nfsId)),
            method: 'PUT',
            headers,
            body: storageNFS,
        }, opts?.responseOpts);
    };

}
