// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Password,
    User,
    UserCredentials,
    UserEmail,
} from '../models';

export interface CreateUserRequest {
    user: User;
}

export interface DeleteUserRequest {
    userId: string;
}

export interface LoginRequest {
    userCredentials: UserCredentials;
}

export interface ReadUserRequest {
    userId: string;
}

export interface ResetPasswordRequest {
    userEmail: UserEmail;
}

export interface ResetUserPasswordRequest {
    userId: string;
}

export interface SetUserApiTokenRequest {
    userId: string;
    expire?: boolean;
    expirationDate?: string;
}

export interface SetUserPasswordRequest {
    userId: string;
    password: Password;
}

export interface UpdateUserRequest {
    userId: string;
    user: User;
}

/**
 * no description
 */
export class UserApi extends BaseAPI {

    /**
     * Creates a new Kowabunga user.
     */
    createUser({ user }: CreateUserRequest): Observable<User>
    createUser({ user }: CreateUserRequest, opts?: OperationOpts): Observable<AjaxResponse<User>>
    createUser({ user }: CreateUserRequest, opts?: OperationOpts): Observable<User | AjaxResponse<User>> {
        throwIfNullOrUndefined(user, 'user', 'createUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<User>({
            url: '/user',
            method: 'POST',
            headers,
            body: user,
        }, opts?.responseOpts);
    };

    /**
     * Deletes an existing Kowabunga user.
     */
    deleteUser({ userId }: DeleteUserRequest): Observable<void>
    deleteUser({ userId }: DeleteUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteUser({ userId }: DeleteUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userId, 'userId', 'deleteUser');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/user/{userId}'.replace('{userId}', encodeURI(userId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kowabunga user objects.
     */
    listUsers(): Observable<Array<string>>
    listUsers(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listUsers(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/user',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new Kowabunga user login credentials.
     */
    login({ userCredentials }: LoginRequest): Observable<UserCredentials>
    login({ userCredentials }: LoginRequest, opts?: OperationOpts): Observable<AjaxResponse<UserCredentials>>
    login({ userCredentials }: LoginRequest, opts?: OperationOpts): Observable<UserCredentials | AjaxResponse<UserCredentials>> {
        throwIfNullOrUndefined(userCredentials, 'userCredentials', 'login');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<UserCredentials>({
            url: '/login',
            method: 'POST',
            headers,
            body: userCredentials,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new Kowabunga user logout session.
     */
    logout(): Observable<void>
    logout(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    logout(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/logout',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a Kowabunga user.
     */
    readUser({ userId }: ReadUserRequest): Observable<User>
    readUser({ userId }: ReadUserRequest, opts?: OperationOpts): Observable<AjaxResponse<User>>
    readUser({ userId }: ReadUserRequest, opts?: OperationOpts): Observable<User | AjaxResponse<User>> {
        throwIfNullOrUndefined(userId, 'userId', 'readUser');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<User>({
            url: '/user/{userId}'.replace('{userId}', encodeURI(userId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a Kowabunga userreset of password for the provided email (server-side generated, will replace any existing one) configuration.
     */
    resetPassword({ userEmail }: ResetPasswordRequest): Observable<void>
    resetPassword({ userEmail }: ResetPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    resetPassword({ userEmail }: ResetPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userEmail, 'userEmail', 'resetPassword');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/resetPassword',
            method: 'PUT',
            headers,
            body: userEmail,
        }, opts?.responseOpts);
    };

    /**
     * Performs a Kowabunga user reset of password (server-side generated, will replace any existing one).
     */
    resetUserPassword({ userId }: ResetUserPasswordRequest): Observable<void>
    resetUserPassword({ userId }: ResetUserPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    resetUserPassword({ userId }: ResetUserPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userId, 'userId', 'resetUserPassword');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/user/{userId}/resetPassword'.replace('{userId}', encodeURI(userId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a Kowabunga user setting of API token (will replace any existing one).
     */
    setUserApiToken({ userId, expire, expirationDate }: SetUserApiTokenRequest): Observable<void>
    setUserApiToken({ userId, expire, expirationDate }: SetUserApiTokenRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    setUserApiToken({ userId, expire, expirationDate }: SetUserApiTokenRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userId, 'userId', 'setUserApiToken');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (expire != null) { query['expire'] = expire; }
        if (expirationDate != null) { query['expiration_date'] = (expirationDate as any).toISOString().split('T')[0]; }

        return this.request<void>({
            url: '/user/{userId}/token'.replace('{userId}', encodeURI(userId)),
            method: 'PATCH',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Updates a Kowabunga user password (will replace any existing one) configuration.
     */
    setUserPassword({ userId, password }: SetUserPasswordRequest): Observable<void>
    setUserPassword({ userId, password }: SetUserPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    setUserPassword({ userId, password }: SetUserPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userId, 'userId', 'setUserPassword');
        throwIfNullOrUndefined(password, 'password', 'setUserPassword');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/user/{userId}/password'.replace('{userId}', encodeURI(userId)),
            method: 'PUT',
            headers,
            body: password,
        }, opts?.responseOpts);
    };

    /**
     * Updates a Kowabunga user configuration.
     */
    updateUser({ userId, user }: UpdateUserRequest): Observable<User>
    updateUser({ userId, user }: UpdateUserRequest, opts?: OperationOpts): Observable<AjaxResponse<User>>
    updateUser({ userId, user }: UpdateUserRequest, opts?: OperationOpts): Observable<User | AjaxResponse<User>> {
        throwIfNullOrUndefined(userId, 'userId', 'updateUser');
        throwIfNullOrUndefined(user, 'user', 'updateUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<User>({
            url: '/user/{userId}'.replace('{userId}', encodeURI(userId)),
            method: 'PUT',
            headers,
            body: user,
        }, opts?.responseOpts);
    };

}
