// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Template,
} from '../models';

export interface DeleteTemplateRequest {
    templateId: string;
}

export interface ReadTemplateRequest {
    templateId: string;
}

export interface UpdateTemplateRequest {
    templateId: string;
    template: Template;
}

/**
 * no description
 */
export class TemplateApi extends BaseAPI {

    /**
     * Deletes an existing image template.
     */
    deleteTemplate({ templateId }: DeleteTemplateRequest): Observable<void>
    deleteTemplate({ templateId }: DeleteTemplateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteTemplate({ templateId }: DeleteTemplateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(templateId, 'templateId', 'deleteTemplate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/template/{templateId}'.replace('{templateId}', encodeURI(templateId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of image template objects.
     */
    listTemplates(): Observable<Array<string>>
    listTemplates(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listTemplates(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/template',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a image template.
     */
    readTemplate({ templateId }: ReadTemplateRequest): Observable<Template>
    readTemplate({ templateId }: ReadTemplateRequest, opts?: OperationOpts): Observable<AjaxResponse<Template>>
    readTemplate({ templateId }: ReadTemplateRequest, opts?: OperationOpts): Observable<Template | AjaxResponse<Template>> {
        throwIfNullOrUndefined(templateId, 'templateId', 'readTemplate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Template>({
            url: '/template/{templateId}'.replace('{templateId}', encodeURI(templateId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a image template configuration.
     */
    updateTemplate({ templateId, template }: UpdateTemplateRequest): Observable<Template>
    updateTemplate({ templateId, template }: UpdateTemplateRequest, opts?: OperationOpts): Observable<AjaxResponse<Template>>
    updateTemplate({ templateId, template }: UpdateTemplateRequest, opts?: OperationOpts): Observable<Template | AjaxResponse<Template>> {
        throwIfNullOrUndefined(templateId, 'templateId', 'updateTemplate');
        throwIfNullOrUndefined(template, 'template', 'updateTemplate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Template>({
            url: '/template/{templateId}'.replace('{templateId}', encodeURI(templateId)),
            method: 'PUT',
            headers,
            body: template,
        }, opts?.responseOpts);
    };

}
