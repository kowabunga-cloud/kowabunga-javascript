// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    Adapter,
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Subnet,
} from '../models';

export interface CreateAdapterRequest {
    subnetId: string;
    adapter: Adapter;
    assignIP?: boolean;
}

export interface DeleteSubnetRequest {
    subnetId: string;
}

export interface ListSubnetAdaptersRequest {
    subnetId: string;
}

export interface ReadSubnetRequest {
    subnetId: string;
}

export interface UpdateSubnetRequest {
    subnetId: string;
    subnet: Subnet;
}

/**
 * no description
 */
export class SubnetApi extends BaseAPI {

    /**
     * Creates a new network adapter.
     */
    createAdapter({ subnetId, adapter, assignIP }: CreateAdapterRequest): Observable<Adapter>
    createAdapter({ subnetId, adapter, assignIP }: CreateAdapterRequest, opts?: OperationOpts): Observable<AjaxResponse<Adapter>>
    createAdapter({ subnetId, adapter, assignIP }: CreateAdapterRequest, opts?: OperationOpts): Observable<Adapter | AjaxResponse<Adapter>> {
        throwIfNullOrUndefined(subnetId, 'subnetId', 'createAdapter');
        throwIfNullOrUndefined(adapter, 'adapter', 'createAdapter');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (assignIP != null) { query['assignIP'] = assignIP; }

        return this.request<Adapter>({
            url: '/subnet/{subnetId}/adapter'.replace('{subnetId}', encodeURI(subnetId)),
            method: 'POST',
            headers,
            query,
            body: adapter,
        }, opts?.responseOpts);
    };

    /**
     * Deletes an existing network subnet.
     */
    deleteSubnet({ subnetId }: DeleteSubnetRequest): Observable<void>
    deleteSubnet({ subnetId }: DeleteSubnetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteSubnet({ subnetId }: DeleteSubnetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(subnetId, 'subnetId', 'deleteSubnet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/subnet/{subnetId}'.replace('{subnetId}', encodeURI(subnetId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of network adapter objects.
     */
    listSubnetAdapters({ subnetId }: ListSubnetAdaptersRequest): Observable<Array<string>>
    listSubnetAdapters({ subnetId }: ListSubnetAdaptersRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listSubnetAdapters({ subnetId }: ListSubnetAdaptersRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(subnetId, 'subnetId', 'listSubnetAdapters');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/subnet/{subnetId}/adapters'.replace('{subnetId}', encodeURI(subnetId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of network subnet objects.
     */
    listSubnets(): Observable<Array<string>>
    listSubnets(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listSubnets(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/subnet',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a network subnet.
     */
    readSubnet({ subnetId }: ReadSubnetRequest): Observable<Subnet>
    readSubnet({ subnetId }: ReadSubnetRequest, opts?: OperationOpts): Observable<AjaxResponse<Subnet>>
    readSubnet({ subnetId }: ReadSubnetRequest, opts?: OperationOpts): Observable<Subnet | AjaxResponse<Subnet>> {
        throwIfNullOrUndefined(subnetId, 'subnetId', 'readSubnet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Subnet>({
            url: '/subnet/{subnetId}'.replace('{subnetId}', encodeURI(subnetId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a network subnet configuration.
     */
    updateSubnet({ subnetId, subnet }: UpdateSubnetRequest): Observable<Subnet>
    updateSubnet({ subnetId, subnet }: UpdateSubnetRequest, opts?: OperationOpts): Observable<AjaxResponse<Subnet>>
    updateSubnet({ subnetId, subnet }: UpdateSubnetRequest, opts?: OperationOpts): Observable<Subnet | AjaxResponse<Subnet>> {
        throwIfNullOrUndefined(subnetId, 'subnetId', 'updateSubnet');
        throwIfNullOrUndefined(subnet, 'subnet', 'updateSubnet');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Subnet>({
            url: '/subnet/{subnetId}'.replace('{subnetId}', encodeURI(subnetId)),
            method: 'PUT',
            headers,
            body: subnet,
        }, opts?.responseOpts);
    };

}
