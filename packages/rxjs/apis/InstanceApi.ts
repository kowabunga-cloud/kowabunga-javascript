// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Instance,
    InstanceRemoteAccess,
    InstanceState,
} from '../models';

export interface DeleteInstanceRequest {
    instanceId: string;
}

export interface ReadInstanceRequest {
    instanceId: string;
}

export interface ReadInstanceRemoteConnectionRequest {
    instanceId: string;
}

export interface ReadInstanceStateRequest {
    instanceId: string;
}

export interface RebootInstanceRequest {
    instanceId: string;
}

export interface ResetInstanceRequest {
    instanceId: string;
}

export interface ResumeInstanceRequest {
    instanceId: string;
}

export interface ShutdownInstanceRequest {
    instanceId: string;
}

export interface StartInstanceRequest {
    instanceId: string;
}

export interface StopInstanceRequest {
    instanceId: string;
}

export interface SuspendInstanceRequest {
    instanceId: string;
}

export interface UpdateInstanceRequest {
    instanceId: string;
    instance: Instance;
}

/**
 * no description
 */
export class InstanceApi extends BaseAPI {

    /**
     * Deletes an existing virtual machine instance.
     */
    deleteInstance({ instanceId }: DeleteInstanceRequest): Observable<void>
    deleteInstance({ instanceId }: DeleteInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteInstance({ instanceId }: DeleteInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'deleteInstance');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/instance/{instanceId}'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of virtual machine instance objects.
     */
    listInstances(): Observable<Array<string>>
    listInstances(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listInstances(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/instance',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a virtual machine instance.
     */
    readInstance({ instanceId }: ReadInstanceRequest): Observable<Instance>
    readInstance({ instanceId }: ReadInstanceRequest, opts?: OperationOpts): Observable<AjaxResponse<Instance>>
    readInstance({ instanceId }: ReadInstanceRequest, opts?: OperationOpts): Observable<Instance | AjaxResponse<Instance>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'readInstance');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Instance>({
            url: '/instance/{instanceId}'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a virtual machine instance remote access characteristics.
     */
    readInstanceRemoteConnection({ instanceId }: ReadInstanceRemoteConnectionRequest): Observable<InstanceRemoteAccess>
    readInstanceRemoteConnection({ instanceId }: ReadInstanceRemoteConnectionRequest, opts?: OperationOpts): Observable<AjaxResponse<InstanceRemoteAccess>>
    readInstanceRemoteConnection({ instanceId }: ReadInstanceRemoteConnectionRequest, opts?: OperationOpts): Observable<InstanceRemoteAccess | AjaxResponse<InstanceRemoteAccess>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'readInstanceRemoteConnection');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<InstanceRemoteAccess>({
            url: '/instance/{instanceId}/connect'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a virtual machine instance state.
     */
    readInstanceState({ instanceId }: ReadInstanceStateRequest): Observable<InstanceState>
    readInstanceState({ instanceId }: ReadInstanceStateRequest, opts?: OperationOpts): Observable<AjaxResponse<InstanceState>>
    readInstanceState({ instanceId }: ReadInstanceStateRequest, opts?: OperationOpts): Observable<InstanceState | AjaxResponse<InstanceState>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'readInstanceState');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<InstanceState>({
            url: '/instance/{instanceId}/state'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a virtual machine instance software reboot.
     */
    rebootInstance({ instanceId }: RebootInstanceRequest): Observable<void>
    rebootInstance({ instanceId }: RebootInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    rebootInstance({ instanceId }: RebootInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'rebootInstance');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/instance/{instanceId}/reboot'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a virtual machine instance hardware reset.
     */
    resetInstance({ instanceId }: ResetInstanceRequest): Observable<void>
    resetInstance({ instanceId }: ResetInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    resetInstance({ instanceId }: ResetInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'resetInstance');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/instance/{instanceId}/reset'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a virtual machine instance software PM resume.
     */
    resumeInstance({ instanceId }: ResumeInstanceRequest): Observable<void>
    resumeInstance({ instanceId }: ResumeInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    resumeInstance({ instanceId }: ResumeInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'resumeInstance');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/instance/{instanceId}/resume'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a virtual machine instance software shutdown.
     */
    shutdownInstance({ instanceId }: ShutdownInstanceRequest): Observable<void>
    shutdownInstance({ instanceId }: ShutdownInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    shutdownInstance({ instanceId }: ShutdownInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'shutdownInstance');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/instance/{instanceId}/shutdown'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a virtual machine instance hardware boot-up.
     */
    startInstance({ instanceId }: StartInstanceRequest): Observable<void>
    startInstance({ instanceId }: StartInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    startInstance({ instanceId }: StartInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'startInstance');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/instance/{instanceId}/start'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a virtual machine instance hardware stop.
     */
    stopInstance({ instanceId }: StopInstanceRequest): Observable<void>
    stopInstance({ instanceId }: StopInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stopInstance({ instanceId }: StopInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'stopInstance');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/instance/{instanceId}/stop'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a virtual machine instance software PM suspend.
     */
    suspendInstance({ instanceId }: SuspendInstanceRequest): Observable<void>
    suspendInstance({ instanceId }: SuspendInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    suspendInstance({ instanceId }: SuspendInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'suspendInstance');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/instance/{instanceId}/suspend'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a virtual machine instance configuration.
     */
    updateInstance({ instanceId, instance }: UpdateInstanceRequest): Observable<Instance>
    updateInstance({ instanceId, instance }: UpdateInstanceRequest, opts?: OperationOpts): Observable<AjaxResponse<Instance>>
    updateInstance({ instanceId, instance }: UpdateInstanceRequest, opts?: OperationOpts): Observable<Instance | AjaxResponse<Instance>> {
        throwIfNullOrUndefined(instanceId, 'instanceId', 'updateInstance');
        throwIfNullOrUndefined(instance, 'instance', 'updateInstance');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Instance>({
            url: '/instance/{instanceId}'.replace('{instanceId}', encodeURI(instanceId)),
            method: 'PUT',
            headers,
            body: instance,
        }, opts?.responseOpts);
    };

}
