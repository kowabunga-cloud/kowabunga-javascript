// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    DnsRecord,
} from '../models';

export interface DeleteDnsRecordRequest {
    recordId: string;
}

export interface ReadDnsRecordRequest {
    recordId: string;
}

export interface UpdateDnsRecordRequest {
    recordId: string;
    dnsRecord: DnsRecord;
}

/**
 * no description
 */
export class RecordApi extends BaseAPI {

    /**
     * Deletes an existing DNS record.
     */
    deleteDnsRecord({ recordId }: DeleteDnsRecordRequest): Observable<void>
    deleteDnsRecord({ recordId }: DeleteDnsRecordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteDnsRecord({ recordId }: DeleteDnsRecordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(recordId, 'recordId', 'deleteDnsRecord');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/record/{recordId}'.replace('{recordId}', encodeURI(recordId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a DNS record.
     */
    readDnsRecord({ recordId }: ReadDnsRecordRequest): Observable<DnsRecord>
    readDnsRecord({ recordId }: ReadDnsRecordRequest, opts?: OperationOpts): Observable<AjaxResponse<DnsRecord>>
    readDnsRecord({ recordId }: ReadDnsRecordRequest, opts?: OperationOpts): Observable<DnsRecord | AjaxResponse<DnsRecord>> {
        throwIfNullOrUndefined(recordId, 'recordId', 'readDnsRecord');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<DnsRecord>({
            url: '/record/{recordId}'.replace('{recordId}', encodeURI(recordId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a DNS record configuration.
     */
    updateDnsRecord({ recordId, dnsRecord }: UpdateDnsRecordRequest): Observable<DnsRecord>
    updateDnsRecord({ recordId, dnsRecord }: UpdateDnsRecordRequest, opts?: OperationOpts): Observable<AjaxResponse<DnsRecord>>
    updateDnsRecord({ recordId, dnsRecord }: UpdateDnsRecordRequest, opts?: OperationOpts): Observable<DnsRecord | AjaxResponse<DnsRecord>> {
        throwIfNullOrUndefined(recordId, 'recordId', 'updateDnsRecord');
        throwIfNullOrUndefined(dnsRecord, 'dnsRecord', 'updateDnsRecord');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<DnsRecord>({
            url: '/record/{recordId}'.replace('{recordId}', encodeURI(recordId)),
            method: 'PUT',
            headers,
            body: dnsRecord,
        }, opts?.responseOpts);
    };

}
