// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    StoragePool,
    Template,
} from '../models';

export interface CreateTemplateRequest {
    poolId: string;
    template: Template;
}

export interface DeleteStoragePoolRequest {
    poolId: string;
}

export interface ListStoragePoolTemplatesRequest {
    poolId: string;
}

export interface ListStoragePoolVolumesRequest {
    poolId: string;
}

export interface ReadStoragePoolRequest {
    poolId: string;
}

export interface SetStoragePoolDefaultTemplateRequest {
    poolId: string;
    templateId: string;
}

export interface UpdateStoragePoolRequest {
    poolId: string;
    storagePool: StoragePool;
}

/**
 * no description
 */
export class PoolApi extends BaseAPI {

    /**
     * Creates a new image template.
     */
    createTemplate({ poolId, template }: CreateTemplateRequest): Observable<Template>
    createTemplate({ poolId, template }: CreateTemplateRequest, opts?: OperationOpts): Observable<AjaxResponse<Template>>
    createTemplate({ poolId, template }: CreateTemplateRequest, opts?: OperationOpts): Observable<Template | AjaxResponse<Template>> {
        throwIfNullOrUndefined(poolId, 'poolId', 'createTemplate');
        throwIfNullOrUndefined(template, 'template', 'createTemplate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Template>({
            url: '/pool/{poolId}/template'.replace('{poolId}', encodeURI(poolId)),
            method: 'POST',
            headers,
            body: template,
        }, opts?.responseOpts);
    };

    /**
     * Deletes an existing storage pool.
     */
    deleteStoragePool({ poolId }: DeleteStoragePoolRequest): Observable<void>
    deleteStoragePool({ poolId }: DeleteStoragePoolRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteStoragePool({ poolId }: DeleteStoragePoolRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(poolId, 'poolId', 'deleteStoragePool');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/pool/{poolId}'.replace('{poolId}', encodeURI(poolId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of image template objects.
     */
    listStoragePoolTemplates({ poolId }: ListStoragePoolTemplatesRequest): Observable<Array<string>>
    listStoragePoolTemplates({ poolId }: ListStoragePoolTemplatesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listStoragePoolTemplates({ poolId }: ListStoragePoolTemplatesRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(poolId, 'poolId', 'listStoragePoolTemplates');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/pool/{poolId}/templates'.replace('{poolId}', encodeURI(poolId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of storage volume objects.
     */
    listStoragePoolVolumes({ poolId }: ListStoragePoolVolumesRequest): Observable<Array<string>>
    listStoragePoolVolumes({ poolId }: ListStoragePoolVolumesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listStoragePoolVolumes({ poolId }: ListStoragePoolVolumesRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(poolId, 'poolId', 'listStoragePoolVolumes');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/pool/{poolId}/volumes'.replace('{poolId}', encodeURI(poolId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of storage pool objects.
     */
    listStoragePools(): Observable<Array<string>>
    listStoragePools(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listStoragePools(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/pool',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a storage pool.
     */
    readStoragePool({ poolId }: ReadStoragePoolRequest): Observable<StoragePool>
    readStoragePool({ poolId }: ReadStoragePoolRequest, opts?: OperationOpts): Observable<AjaxResponse<StoragePool>>
    readStoragePool({ poolId }: ReadStoragePoolRequest, opts?: OperationOpts): Observable<StoragePool | AjaxResponse<StoragePool>> {
        throwIfNullOrUndefined(poolId, 'poolId', 'readStoragePool');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<StoragePool>({
            url: '/pool/{poolId}'.replace('{poolId}', encodeURI(poolId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a storage pool setting of default template.
     */
    setStoragePoolDefaultTemplate({ poolId, templateId }: SetStoragePoolDefaultTemplateRequest): Observable<void>
    setStoragePoolDefaultTemplate({ poolId, templateId }: SetStoragePoolDefaultTemplateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    setStoragePoolDefaultTemplate({ poolId, templateId }: SetStoragePoolDefaultTemplateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(poolId, 'poolId', 'setStoragePoolDefaultTemplate');
        throwIfNullOrUndefined(templateId, 'templateId', 'setStoragePoolDefaultTemplate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/pool/{poolId}/template/{templateId}/default'.replace('{poolId}', encodeURI(poolId)).replace('{templateId}', encodeURI(templateId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a storage pool configuration.
     */
    updateStoragePool({ poolId, storagePool }: UpdateStoragePoolRequest): Observable<StoragePool>
    updateStoragePool({ poolId, storagePool }: UpdateStoragePoolRequest, opts?: OperationOpts): Observable<AjaxResponse<StoragePool>>
    updateStoragePool({ poolId, storagePool }: UpdateStoragePoolRequest, opts?: OperationOpts): Observable<StoragePool | AjaxResponse<StoragePool>> {
        throwIfNullOrUndefined(poolId, 'poolId', 'updateStoragePool');
        throwIfNullOrUndefined(storagePool, 'storagePool', 'updateStoragePool');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<StoragePool>({
            url: '/pool/{poolId}'.replace('{poolId}', encodeURI(poolId)),
            method: 'PUT',
            headers,
            body: storagePool,
        }, opts?.responseOpts);
    };

}
