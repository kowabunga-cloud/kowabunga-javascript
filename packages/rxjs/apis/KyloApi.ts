// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Kylo,
} from '../models';

export interface DeleteKyloRequest {
    kyloId: string;
}

export interface ReadKyloRequest {
    kyloId: string;
}

export interface UpdateKyloRequest {
    kyloId: string;
    kylo: Kylo;
}

/**
 * no description
 */
export class KyloApi extends BaseAPI {

    /**
     * Deletes an existing Kylo.
     */
    deleteKylo({ kyloId }: DeleteKyloRequest): Observable<void>
    deleteKylo({ kyloId }: DeleteKyloRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteKylo({ kyloId }: DeleteKyloRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(kyloId, 'kyloId', 'deleteKylo');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/kylo/{kyloId}'.replace('{kyloId}', encodeURI(kyloId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kylo objects.
     */
    listKylos(): Observable<Array<string>>
    listKylos(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listKylos(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/kylo',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a Kylo.
     */
    readKylo({ kyloId }: ReadKyloRequest): Observable<Kylo>
    readKylo({ kyloId }: ReadKyloRequest, opts?: OperationOpts): Observable<AjaxResponse<Kylo>>
    readKylo({ kyloId }: ReadKyloRequest, opts?: OperationOpts): Observable<Kylo | AjaxResponse<Kylo>> {
        throwIfNullOrUndefined(kyloId, 'kyloId', 'readKylo');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kylo>({
            url: '/kylo/{kyloId}'.replace('{kyloId}', encodeURI(kyloId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a Kylo configuration.
     */
    updateKylo({ kyloId, kylo }: UpdateKyloRequest): Observable<Kylo>
    updateKylo({ kyloId, kylo }: UpdateKyloRequest, opts?: OperationOpts): Observable<AjaxResponse<Kylo>>
    updateKylo({ kyloId, kylo }: UpdateKyloRequest, opts?: OperationOpts): Observable<Kylo | AjaxResponse<Kylo>> {
        throwIfNullOrUndefined(kyloId, 'kyloId', 'updateKylo');
        throwIfNullOrUndefined(kylo, 'kylo', 'updateKylo');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kylo>({
            url: '/kylo/{kyloId}'.replace('{kyloId}', encodeURI(kyloId)),
            method: 'PUT',
            headers,
            body: kylo,
        }, opts?.responseOpts);
    };

}
