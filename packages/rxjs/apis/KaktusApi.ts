// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Kaktus,
    KaktusCaps,
} from '../models';

export interface DeleteKaktusRequest {
    kaktusId: string;
}

export interface ListKaktusInstancesRequest {
    kaktusId: string;
}

export interface ReadKaktusRequest {
    kaktusId: string;
}

export interface ReadKaktusCapsRequest {
    kaktusId: string;
}

export interface UpdateKaktusRequest {
    kaktusId: string;
    kaktus: Kaktus;
}

/**
 * no description
 */
export class KaktusApi extends BaseAPI {

    /**
     * Deletes an existing Kaktus computing node.
     */
    deleteKaktus({ kaktusId }: DeleteKaktusRequest): Observable<void>
    deleteKaktus({ kaktusId }: DeleteKaktusRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteKaktus({ kaktusId }: DeleteKaktusRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(kaktusId, 'kaktusId', 'deleteKaktus');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/kaktus/{kaktusId}'.replace('{kaktusId}', encodeURI(kaktusId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of virtual machine instance objects.
     */
    listKaktusInstances({ kaktusId }: ListKaktusInstancesRequest): Observable<Array<string>>
    listKaktusInstances({ kaktusId }: ListKaktusInstancesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listKaktusInstances({ kaktusId }: ListKaktusInstancesRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(kaktusId, 'kaktusId', 'listKaktusInstances');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/kaktus/{kaktusId}/instances'.replace('{kaktusId}', encodeURI(kaktusId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kaktus computing node objects.
     */
    listKaktuss(): Observable<Array<string>>
    listKaktuss(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listKaktuss(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/kaktus',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a Kaktus computing node.
     */
    readKaktus({ kaktusId }: ReadKaktusRequest): Observable<Kaktus>
    readKaktus({ kaktusId }: ReadKaktusRequest, opts?: OperationOpts): Observable<AjaxResponse<Kaktus>>
    readKaktus({ kaktusId }: ReadKaktusRequest, opts?: OperationOpts): Observable<Kaktus | AjaxResponse<Kaktus>> {
        throwIfNullOrUndefined(kaktusId, 'kaktusId', 'readKaktus');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kaktus>({
            url: '/kaktus/{kaktusId}'.replace('{kaktusId}', encodeURI(kaktusId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a Kaktus computing node capability.
     */
    readKaktusCaps({ kaktusId }: ReadKaktusCapsRequest): Observable<KaktusCaps>
    readKaktusCaps({ kaktusId }: ReadKaktusCapsRequest, opts?: OperationOpts): Observable<AjaxResponse<KaktusCaps>>
    readKaktusCaps({ kaktusId }: ReadKaktusCapsRequest, opts?: OperationOpts): Observable<KaktusCaps | AjaxResponse<KaktusCaps>> {
        throwIfNullOrUndefined(kaktusId, 'kaktusId', 'readKaktusCaps');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<KaktusCaps>({
            url: '/kaktus/{kaktusId}/caps'.replace('{kaktusId}', encodeURI(kaktusId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a Kaktus computing node configuration.
     */
    updateKaktus({ kaktusId, kaktus }: UpdateKaktusRequest): Observable<Kaktus>
    updateKaktus({ kaktusId, kaktus }: UpdateKaktusRequest, opts?: OperationOpts): Observable<AjaxResponse<Kaktus>>
    updateKaktus({ kaktusId, kaktus }: UpdateKaktusRequest, opts?: OperationOpts): Observable<Kaktus | AjaxResponse<Kaktus>> {
        throwIfNullOrUndefined(kaktusId, 'kaktusId', 'updateKaktus');
        throwIfNullOrUndefined(kaktus, 'kaktus', 'updateKaktus');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kaktus>({
            url: '/kaktus/{kaktusId}'.replace('{kaktusId}', encodeURI(kaktusId)),
            method: 'PUT',
            headers,
            body: kaktus,
        }, opts?.responseOpts);
    };

}
