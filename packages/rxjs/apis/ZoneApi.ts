// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Kaktus,
    Zone,
} from '../models';

export interface CreateKaktusRequest {
    zoneId: string;
    kaktus: Kaktus;
}

export interface DeleteZoneRequest {
    zoneId: string;
}

export interface ListZoneKaktusesRequest {
    zoneId: string;
}

export interface ReadZoneRequest {
    zoneId: string;
}

export interface UpdateZoneRequest {
    zoneId: string;
    zone: Zone;
}

/**
 * no description
 */
export class ZoneApi extends BaseAPI {

    /**
     * Creates a new Kaktus computing node.
     */
    createKaktus({ zoneId, kaktus }: CreateKaktusRequest): Observable<Kaktus>
    createKaktus({ zoneId, kaktus }: CreateKaktusRequest, opts?: OperationOpts): Observable<AjaxResponse<Kaktus>>
    createKaktus({ zoneId, kaktus }: CreateKaktusRequest, opts?: OperationOpts): Observable<Kaktus | AjaxResponse<Kaktus>> {
        throwIfNullOrUndefined(zoneId, 'zoneId', 'createKaktus');
        throwIfNullOrUndefined(kaktus, 'kaktus', 'createKaktus');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kaktus>({
            url: '/zone/{zoneId}/kaktus'.replace('{zoneId}', encodeURI(zoneId)),
            method: 'POST',
            headers,
            body: kaktus,
        }, opts?.responseOpts);
    };

    /**
     * Deletes an existing availability zone.
     */
    deleteZone({ zoneId }: DeleteZoneRequest): Observable<void>
    deleteZone({ zoneId }: DeleteZoneRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteZone({ zoneId }: DeleteZoneRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(zoneId, 'zoneId', 'deleteZone');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/zone/{zoneId}'.replace('{zoneId}', encodeURI(zoneId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kaktus computing node objects.
     */
    listZoneKaktuses({ zoneId }: ListZoneKaktusesRequest): Observable<Array<string>>
    listZoneKaktuses({ zoneId }: ListZoneKaktusesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listZoneKaktuses({ zoneId }: ListZoneKaktusesRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(zoneId, 'zoneId', 'listZoneKaktuses');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/zone/{zoneId}/kaktuses'.replace('{zoneId}', encodeURI(zoneId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of availability zone objects.
     */
    listZones(): Observable<Array<string>>
    listZones(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listZones(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/zone',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a availability zone.
     */
    readZone({ zoneId }: ReadZoneRequest): Observable<Zone>
    readZone({ zoneId }: ReadZoneRequest, opts?: OperationOpts): Observable<AjaxResponse<Zone>>
    readZone({ zoneId }: ReadZoneRequest, opts?: OperationOpts): Observable<Zone | AjaxResponse<Zone>> {
        throwIfNullOrUndefined(zoneId, 'zoneId', 'readZone');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Zone>({
            url: '/zone/{zoneId}'.replace('{zoneId}', encodeURI(zoneId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a availability zone configuration.
     */
    updateZone({ zoneId, zone }: UpdateZoneRequest): Observable<Zone>
    updateZone({ zoneId, zone }: UpdateZoneRequest, opts?: OperationOpts): Observable<AjaxResponse<Zone>>
    updateZone({ zoneId, zone }: UpdateZoneRequest, opts?: OperationOpts): Observable<Zone | AjaxResponse<Zone>> {
        throwIfNullOrUndefined(zoneId, 'zoneId', 'updateZone');
        throwIfNullOrUndefined(zone, 'zone', 'updateZone');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Zone>({
            url: '/zone/{zoneId}'.replace('{zoneId}', encodeURI(zoneId)),
            method: 'PUT',
            headers,
            body: zone,
        }, opts?.responseOpts);
    };

}
