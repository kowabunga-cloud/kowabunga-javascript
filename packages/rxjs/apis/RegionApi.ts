// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Kiwi,
    Region,
    StorageNFS,
    StoragePool,
    VNet,
    Zone,
} from '../models';

export interface CreateKiwiRequest {
    regionId: string;
    kiwi: Kiwi;
}

export interface CreateRegionRequest {
    region: Region;
}

export interface CreateStorageNFSRequest {
    regionId: string;
    storageNFS: StorageNFS;
    poolId?: string;
}

export interface CreateStoragePoolRequest {
    regionId: string;
    storagePool: StoragePool;
}

export interface CreateVNetRequest {
    regionId: string;
    vNet: VNet;
}

export interface CreateZoneRequest {
    regionId: string;
    zone: Zone;
}

export interface DeleteRegionRequest {
    regionId: string;
}

export interface ListRegionKiwisRequest {
    regionId: string;
}

export interface ListRegionStorageNFSsRequest {
    regionId: string;
    poolId?: string;
}

export interface ListRegionStoragePoolsRequest {
    regionId: string;
}

export interface ListRegionVNetsRequest {
    regionId: string;
}

export interface ListRegionZonesRequest {
    regionId: string;
}

export interface ReadRegionRequest {
    regionId: string;
}

export interface SetRegionDefaultStorageNFSRequest {
    regionId: string;
    nfsId: string;
}

export interface SetRegionDefaultStoragePoolRequest {
    regionId: string;
    poolId: string;
}

export interface UpdateRegionRequest {
    regionId: string;
    region: Region;
}

/**
 * no description
 */
export class RegionApi extends BaseAPI {

    /**
     * Creates a new Kiwi (Kowabunga Inner Wan Interface) provides edge-network services..
     */
    createKiwi({ regionId, kiwi }: CreateKiwiRequest): Observable<Kiwi>
    createKiwi({ regionId, kiwi }: CreateKiwiRequest, opts?: OperationOpts): Observable<AjaxResponse<Kiwi>>
    createKiwi({ regionId, kiwi }: CreateKiwiRequest, opts?: OperationOpts): Observable<Kiwi | AjaxResponse<Kiwi>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'createKiwi');
        throwIfNullOrUndefined(kiwi, 'kiwi', 'createKiwi');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kiwi>({
            url: '/region/{regionId}/kiwi'.replace('{regionId}', encodeURI(regionId)),
            method: 'POST',
            headers,
            body: kiwi,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new region.
     */
    createRegion({ region }: CreateRegionRequest): Observable<Region>
    createRegion({ region }: CreateRegionRequest, opts?: OperationOpts): Observable<AjaxResponse<Region>>
    createRegion({ region }: CreateRegionRequest, opts?: OperationOpts): Observable<Region | AjaxResponse<Region>> {
        throwIfNullOrUndefined(region, 'region', 'createRegion');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Region>({
            url: '/region',
            method: 'POST',
            headers,
            body: region,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new NFS storage.
     */
    createStorageNFS({ regionId, storageNFS, poolId }: CreateStorageNFSRequest): Observable<StorageNFS>
    createStorageNFS({ regionId, storageNFS, poolId }: CreateStorageNFSRequest, opts?: OperationOpts): Observable<AjaxResponse<StorageNFS>>
    createStorageNFS({ regionId, storageNFS, poolId }: CreateStorageNFSRequest, opts?: OperationOpts): Observable<StorageNFS | AjaxResponse<StorageNFS>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'createStorageNFS');
        throwIfNullOrUndefined(storageNFS, 'storageNFS', 'createStorageNFS');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<StorageNFS>({
            url: '/region/{regionId}/nfs'.replace('{regionId}', encodeURI(regionId)),
            method: 'POST',
            headers,
            query,
            body: storageNFS,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new storage pool.
     */
    createStoragePool({ regionId, storagePool }: CreateStoragePoolRequest): Observable<StoragePool>
    createStoragePool({ regionId, storagePool }: CreateStoragePoolRequest, opts?: OperationOpts): Observable<AjaxResponse<StoragePool>>
    createStoragePool({ regionId, storagePool }: CreateStoragePoolRequest, opts?: OperationOpts): Observable<StoragePool | AjaxResponse<StoragePool>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'createStoragePool');
        throwIfNullOrUndefined(storagePool, 'storagePool', 'createStoragePool');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<StoragePool>({
            url: '/region/{regionId}/pool'.replace('{regionId}', encodeURI(regionId)),
            method: 'POST',
            headers,
            body: storagePool,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new virtual network.
     */
    createVNet({ regionId, vNet }: CreateVNetRequest): Observable<VNet>
    createVNet({ regionId, vNet }: CreateVNetRequest, opts?: OperationOpts): Observable<AjaxResponse<VNet>>
    createVNet({ regionId, vNet }: CreateVNetRequest, opts?: OperationOpts): Observable<VNet | AjaxResponse<VNet>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'createVNet');
        throwIfNullOrUndefined(vNet, 'vNet', 'createVNet');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<VNet>({
            url: '/region/{regionId}/vnet'.replace('{regionId}', encodeURI(regionId)),
            method: 'POST',
            headers,
            body: vNet,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new availability zone.
     */
    createZone({ regionId, zone }: CreateZoneRequest): Observable<Zone>
    createZone({ regionId, zone }: CreateZoneRequest, opts?: OperationOpts): Observable<AjaxResponse<Zone>>
    createZone({ regionId, zone }: CreateZoneRequest, opts?: OperationOpts): Observable<Zone | AjaxResponse<Zone>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'createZone');
        throwIfNullOrUndefined(zone, 'zone', 'createZone');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Zone>({
            url: '/region/{regionId}/zone'.replace('{regionId}', encodeURI(regionId)),
            method: 'POST',
            headers,
            body: zone,
        }, opts?.responseOpts);
    };

    /**
     * Deletes an existing region.
     */
    deleteRegion({ regionId }: DeleteRegionRequest): Observable<void>
    deleteRegion({ regionId }: DeleteRegionRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteRegion({ regionId }: DeleteRegionRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'deleteRegion');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/region/{regionId}'.replace('{regionId}', encodeURI(regionId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kiwi (Kowabunga Inner Wan Interface) provides edge-network services. objects.
     */
    listRegionKiwis({ regionId }: ListRegionKiwisRequest): Observable<Array<string>>
    listRegionKiwis({ regionId }: ListRegionKiwisRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listRegionKiwis({ regionId }: ListRegionKiwisRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'listRegionKiwis');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/region/{regionId}/kiwis'.replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of NFS storage objects.
     */
    listRegionStorageNFSs({ regionId, poolId }: ListRegionStorageNFSsRequest): Observable<Array<string>>
    listRegionStorageNFSs({ regionId, poolId }: ListRegionStorageNFSsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listRegionStorageNFSs({ regionId, poolId }: ListRegionStorageNFSsRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'listRegionStorageNFSs');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<string>>({
            url: '/region/{regionId}/nfs'.replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of storage pool objects.
     */
    listRegionStoragePools({ regionId }: ListRegionStoragePoolsRequest): Observable<Array<string>>
    listRegionStoragePools({ regionId }: ListRegionStoragePoolsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listRegionStoragePools({ regionId }: ListRegionStoragePoolsRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'listRegionStoragePools');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/region/{regionId}/pools'.replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of virtual network objects.
     */
    listRegionVNets({ regionId }: ListRegionVNetsRequest): Observable<Array<string>>
    listRegionVNets({ regionId }: ListRegionVNetsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listRegionVNets({ regionId }: ListRegionVNetsRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'listRegionVNets');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/region/{regionId}/vnets'.replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of availability zone objects.
     */
    listRegionZones({ regionId }: ListRegionZonesRequest): Observable<Array<string>>
    listRegionZones({ regionId }: ListRegionZonesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listRegionZones({ regionId }: ListRegionZonesRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'listRegionZones');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/region/{regionId}/zones'.replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of region objects.
     */
    listRegions(): Observable<Array<string>>
    listRegions(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listRegions(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/region',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a region.
     */
    readRegion({ regionId }: ReadRegionRequest): Observable<Region>
    readRegion({ regionId }: ReadRegionRequest, opts?: OperationOpts): Observable<AjaxResponse<Region>>
    readRegion({ regionId }: ReadRegionRequest, opts?: OperationOpts): Observable<Region | AjaxResponse<Region>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'readRegion');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Region>({
            url: '/region/{regionId}'.replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a region setting of default NFS storage.
     */
    setRegionDefaultStorageNFS({ regionId, nfsId }: SetRegionDefaultStorageNFSRequest): Observable<void>
    setRegionDefaultStorageNFS({ regionId, nfsId }: SetRegionDefaultStorageNFSRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    setRegionDefaultStorageNFS({ regionId, nfsId }: SetRegionDefaultStorageNFSRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'setRegionDefaultStorageNFS');
        throwIfNullOrUndefined(nfsId, 'nfsId', 'setRegionDefaultStorageNFS');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/region/{regionId}/nfs/{nfsId}/default'.replace('{regionId}', encodeURI(regionId)).replace('{nfsId}', encodeURI(nfsId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Performs a region setting of default storage pool.
     */
    setRegionDefaultStoragePool({ regionId, poolId }: SetRegionDefaultStoragePoolRequest): Observable<void>
    setRegionDefaultStoragePool({ regionId, poolId }: SetRegionDefaultStoragePoolRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    setRegionDefaultStoragePool({ regionId, poolId }: SetRegionDefaultStoragePoolRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'setRegionDefaultStoragePool');
        throwIfNullOrUndefined(poolId, 'poolId', 'setRegionDefaultStoragePool');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/region/{regionId}/pool/{poolId}/default'.replace('{regionId}', encodeURI(regionId)).replace('{poolId}', encodeURI(poolId)),
            method: 'PATCH',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a region configuration.
     */
    updateRegion({ regionId, region }: UpdateRegionRequest): Observable<Region>
    updateRegion({ regionId, region }: UpdateRegionRequest, opts?: OperationOpts): Observable<AjaxResponse<Region>>
    updateRegion({ regionId, region }: UpdateRegionRequest, opts?: OperationOpts): Observable<Region | AjaxResponse<Region>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'updateRegion');
        throwIfNullOrUndefined(region, 'region', 'updateRegion');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Region>({
            url: '/region/{regionId}'.replace('{regionId}', encodeURI(regionId)),
            method: 'PUT',
            headers,
            body: region,
        }, opts?.responseOpts);
    };

}
