// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Kiwi,
} from '../models';

export interface DeleteKiwiRequest {
    kiwiId: string;
}

export interface ReadKiwiRequest {
    kiwiId: string;
}

export interface UpdateKiwiRequest {
    kiwiId: string;
    kiwi: Kiwi;
}

/**
 * no description
 */
export class KiwiApi extends BaseAPI {

    /**
     * Deletes an existing Kiwi (Kowabunga Inner Wan Interface) provides edge-network services..
     */
    deleteKiwi({ kiwiId }: DeleteKiwiRequest): Observable<void>
    deleteKiwi({ kiwiId }: DeleteKiwiRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteKiwi({ kiwiId }: DeleteKiwiRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(kiwiId, 'kiwiId', 'deleteKiwi');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/kiwi/{kiwiId}'.replace('{kiwiId}', encodeURI(kiwiId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kiwi (Kowabunga Inner Wan Interface) provides edge-network services. objects.
     */
    listKiwis(): Observable<Array<string>>
    listKiwis(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listKiwis(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/kiwi',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a Kiwi (Kowabunga Inner Wan Interface) provides edge-network services..
     */
    readKiwi({ kiwiId }: ReadKiwiRequest): Observable<Kiwi>
    readKiwi({ kiwiId }: ReadKiwiRequest, opts?: OperationOpts): Observable<AjaxResponse<Kiwi>>
    readKiwi({ kiwiId }: ReadKiwiRequest, opts?: OperationOpts): Observable<Kiwi | AjaxResponse<Kiwi>> {
        throwIfNullOrUndefined(kiwiId, 'kiwiId', 'readKiwi');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kiwi>({
            url: '/kiwi/{kiwiId}'.replace('{kiwiId}', encodeURI(kiwiId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a Kiwi (Kowabunga Inner Wan Interface) provides edge-network services. configuration.
     */
    updateKiwi({ kiwiId, kiwi }: UpdateKiwiRequest): Observable<Kiwi>
    updateKiwi({ kiwiId, kiwi }: UpdateKiwiRequest, opts?: OperationOpts): Observable<AjaxResponse<Kiwi>>
    updateKiwi({ kiwiId, kiwi }: UpdateKiwiRequest, opts?: OperationOpts): Observable<Kiwi | AjaxResponse<Kiwi>> {
        throwIfNullOrUndefined(kiwiId, 'kiwiId', 'updateKiwi');
        throwIfNullOrUndefined(kiwi, 'kiwi', 'updateKiwi');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kiwi>({
            url: '/kiwi/{kiwiId}'.replace('{kiwiId}', encodeURI(kiwiId)),
            method: 'PUT',
            headers,
            body: kiwi,
        }, opts?.responseOpts);
    };

}
