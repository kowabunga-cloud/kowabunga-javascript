// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Volume,
} from '../models';

export interface DeleteVolumeRequest {
    volumeId: string;
}

export interface ReadVolumeRequest {
    volumeId: string;
}

export interface UpdateVolumeRequest {
    volumeId: string;
    volume: Volume;
}

/**
 * no description
 */
export class VolumeApi extends BaseAPI {

    /**
     * Deletes an existing storage volume.
     */
    deleteVolume({ volumeId }: DeleteVolumeRequest): Observable<void>
    deleteVolume({ volumeId }: DeleteVolumeRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteVolume({ volumeId }: DeleteVolumeRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(volumeId, 'volumeId', 'deleteVolume');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/volume/{volumeId}'.replace('{volumeId}', encodeURI(volumeId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of storage volume objects.
     */
    listVolumes(): Observable<Array<string>>
    listVolumes(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listVolumes(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/volume',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a storage volume.
     */
    readVolume({ volumeId }: ReadVolumeRequest): Observable<Volume>
    readVolume({ volumeId }: ReadVolumeRequest, opts?: OperationOpts): Observable<AjaxResponse<Volume>>
    readVolume({ volumeId }: ReadVolumeRequest, opts?: OperationOpts): Observable<Volume | AjaxResponse<Volume>> {
        throwIfNullOrUndefined(volumeId, 'volumeId', 'readVolume');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Volume>({
            url: '/volume/{volumeId}'.replace('{volumeId}', encodeURI(volumeId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a storage volume configuration.
     */
    updateVolume({ volumeId, volume }: UpdateVolumeRequest): Observable<Volume>
    updateVolume({ volumeId, volume }: UpdateVolumeRequest, opts?: OperationOpts): Observable<AjaxResponse<Volume>>
    updateVolume({ volumeId, volume }: UpdateVolumeRequest, opts?: OperationOpts): Observable<Volume | AjaxResponse<Volume>> {
        throwIfNullOrUndefined(volumeId, 'volumeId', 'updateVolume');
        throwIfNullOrUndefined(volume, 'volume', 'updateVolume');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Volume>({
            url: '/volume/{volumeId}'.replace('{volumeId}', encodeURI(volumeId)),
            method: 'PUT',
            headers,
            body: volume,
        }, opts?.responseOpts);
    };

}
