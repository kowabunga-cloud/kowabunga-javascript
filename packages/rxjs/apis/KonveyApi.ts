// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Konvey,
} from '../models';

export interface DeleteKonveyRequest {
    konveyId: string;
}

export interface ReadKonveyRequest {
    konveyId: string;
}

export interface UpdateKonveyRequest {
    konveyId: string;
    konvey: Konvey;
}

/**
 * no description
 */
export class KonveyApi extends BaseAPI {

    /**
     * Deletes an existing Konvey (Kowabunga Network Load-Balancer).
     */
    deleteKonvey({ konveyId }: DeleteKonveyRequest): Observable<void>
    deleteKonvey({ konveyId }: DeleteKonveyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteKonvey({ konveyId }: DeleteKonveyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(konveyId, 'konveyId', 'deleteKonvey');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/konvey/{konveyId}'.replace('{konveyId}', encodeURI(konveyId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Konvey (Kowabunga Network Load-Balancer) objects.
     */
    listKonveys(): Observable<Array<string>>
    listKonveys(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listKonveys(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/konvey',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a Konvey (Kowabunga Network Load-Balancer).
     */
    readKonvey({ konveyId }: ReadKonveyRequest): Observable<Konvey>
    readKonvey({ konveyId }: ReadKonveyRequest, opts?: OperationOpts): Observable<AjaxResponse<Konvey>>
    readKonvey({ konveyId }: ReadKonveyRequest, opts?: OperationOpts): Observable<Konvey | AjaxResponse<Konvey>> {
        throwIfNullOrUndefined(konveyId, 'konveyId', 'readKonvey');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Konvey>({
            url: '/konvey/{konveyId}'.replace('{konveyId}', encodeURI(konveyId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a Konvey (Kowabunga Network Load-Balancer) configuration.
     */
    updateKonvey({ konveyId, konvey }: UpdateKonveyRequest): Observable<Konvey>
    updateKonvey({ konveyId, konvey }: UpdateKonveyRequest, opts?: OperationOpts): Observable<AjaxResponse<Konvey>>
    updateKonvey({ konveyId, konvey }: UpdateKonveyRequest, opts?: OperationOpts): Observable<Konvey | AjaxResponse<Konvey>> {
        throwIfNullOrUndefined(konveyId, 'konveyId', 'updateKonvey');
        throwIfNullOrUndefined(konvey, 'konvey', 'updateKonvey');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Konvey>({
            url: '/konvey/{konveyId}'.replace('{konveyId}', encodeURI(konveyId)),
            method: 'PUT',
            headers,
            body: konvey,
        }, opts?.responseOpts);
    };

}
