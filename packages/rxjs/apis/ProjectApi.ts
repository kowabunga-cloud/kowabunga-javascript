// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Cost,
    DnsRecord,
    Instance,
    Kawaii,
    Kompute,
    Konvey,
    Kylo,
    Project,
    ProjectResources,
    Volume,
} from '../models';

export interface CreateProjectRequest {
    project: Project;
    subnetSize?: number;
}

export interface CreateProjectDnsRecordRequest {
    projectId: string;
    dnsRecord: DnsRecord;
}

export interface CreateProjectRegionKawaiiRequest {
    projectId: string;
    regionId: string;
    kawaii: Kawaii;
}

export interface CreateProjectRegionKonveyRequest {
    projectId: string;
    regionId: string;
    konvey: Konvey;
}

export interface CreateProjectRegionKyloRequest {
    projectId: string;
    regionId: string;
    kylo: Kylo;
    nfsId?: string;
}

export interface CreateProjectRegionVolumeRequest {
    projectId: string;
    regionId: string;
    volume: Volume;
    poolId?: string;
    templateId?: string;
}

export interface CreateProjectZoneInstanceRequest {
    projectId: string;
    zoneId: string;
    instance: Instance;
}

export interface CreateProjectZoneKomputeRequest {
    projectId: string;
    zoneId: string;
    kompute: Kompute;
    poolId?: string;
    templateId?: string;
    _public?: boolean;
}

export interface CreateProjectZoneKonveyRequest {
    projectId: string;
    zoneId: string;
    konvey: Konvey;
}

export interface DeleteProjectRequest {
    projectId: string;
}

export interface ListProjectDnsRecordsRequest {
    projectId: string;
}

export interface ListProjectRegionKawaiisRequest {
    projectId: string;
    regionId: string;
}

export interface ListProjectRegionKonveysRequest {
    projectId: string;
    regionId: string;
}

export interface ListProjectRegionKylosRequest {
    projectId: string;
    regionId: string;
    nfsId?: string;
}

export interface ListProjectRegionVolumesRequest {
    projectId: string;
    regionId: string;
}

export interface ListProjectZoneInstancesRequest {
    projectId: string;
    zoneId: string;
}

export interface ListProjectZoneKomputesRequest {
    projectId: string;
    zoneId: string;
}

export interface ListProjectZoneKonveysRequest {
    projectId: string;
    zoneId: string;
}

export interface ListProjectsRequest {
    subnetSize?: number;
}

export interface ReadProjectRequest {
    projectId: string;
}

export interface ReadProjectCostRequest {
    projectId: string;
}

export interface ReadProjectUsageRequest {
    projectId: string;
}

export interface UpdateProjectRequest {
    projectId: string;
    project: Project;
}

/**
 * no description
 */
export class ProjectApi extends BaseAPI {

    /**
     * Creates a new project.
     */
    createProject({ project, subnetSize }: CreateProjectRequest): Observable<Project>
    createProject({ project, subnetSize }: CreateProjectRequest, opts?: OperationOpts): Observable<AjaxResponse<Project>>
    createProject({ project, subnetSize }: CreateProjectRequest, opts?: OperationOpts): Observable<Project | AjaxResponse<Project>> {
        throwIfNullOrUndefined(project, 'project', 'createProject');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (subnetSize != null) { query['subnetSize'] = subnetSize; }

        return this.request<Project>({
            url: '/project',
            method: 'POST',
            headers,
            query,
            body: project,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new DNS record.
     */
    createProjectDnsRecord({ projectId, dnsRecord }: CreateProjectDnsRecordRequest): Observable<DnsRecord>
    createProjectDnsRecord({ projectId, dnsRecord }: CreateProjectDnsRecordRequest, opts?: OperationOpts): Observable<AjaxResponse<DnsRecord>>
    createProjectDnsRecord({ projectId, dnsRecord }: CreateProjectDnsRecordRequest, opts?: OperationOpts): Observable<DnsRecord | AjaxResponse<DnsRecord>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'createProjectDnsRecord');
        throwIfNullOrUndefined(dnsRecord, 'dnsRecord', 'createProjectDnsRecord');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<DnsRecord>({
            url: '/project/{projectId}/record'.replace('{projectId}', encodeURI(projectId)),
            method: 'POST',
            headers,
            body: dnsRecord,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new Kawaii.
     */
    createProjectRegionKawaii({ projectId, regionId, kawaii }: CreateProjectRegionKawaiiRequest): Observable<Kawaii>
    createProjectRegionKawaii({ projectId, regionId, kawaii }: CreateProjectRegionKawaiiRequest, opts?: OperationOpts): Observable<AjaxResponse<Kawaii>>
    createProjectRegionKawaii({ projectId, regionId, kawaii }: CreateProjectRegionKawaiiRequest, opts?: OperationOpts): Observable<Kawaii | AjaxResponse<Kawaii>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'createProjectRegionKawaii');
        throwIfNullOrUndefined(regionId, 'regionId', 'createProjectRegionKawaii');
        throwIfNullOrUndefined(kawaii, 'kawaii', 'createProjectRegionKawaii');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Kawaii>({
            url: '/project/{projectId}/region/{regionId}/kawaii'.replace('{projectId}', encodeURI(projectId)).replace('{regionId}', encodeURI(regionId)),
            method: 'POST',
            headers,
            body: kawaii,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new Konvey (Kowabunga Network Load-Balancer).
     */
    createProjectRegionKonvey({ projectId, regionId, konvey }: CreateProjectRegionKonveyRequest): Observable<Konvey>
    createProjectRegionKonvey({ projectId, regionId, konvey }: CreateProjectRegionKonveyRequest, opts?: OperationOpts): Observable<AjaxResponse<Konvey>>
    createProjectRegionKonvey({ projectId, regionId, konvey }: CreateProjectRegionKonveyRequest, opts?: OperationOpts): Observable<Konvey | AjaxResponse<Konvey>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'createProjectRegionKonvey');
        throwIfNullOrUndefined(regionId, 'regionId', 'createProjectRegionKonvey');
        throwIfNullOrUndefined(konvey, 'konvey', 'createProjectRegionKonvey');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Konvey>({
            url: '/project/{projectId}/region/{regionId}/konvey'.replace('{projectId}', encodeURI(projectId)).replace('{regionId}', encodeURI(regionId)),
            method: 'POST',
            headers,
            body: konvey,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new Kylo.
     */
    createProjectRegionKylo({ projectId, regionId, kylo, nfsId }: CreateProjectRegionKyloRequest): Observable<Kylo>
    createProjectRegionKylo({ projectId, regionId, kylo, nfsId }: CreateProjectRegionKyloRequest, opts?: OperationOpts): Observable<AjaxResponse<Kylo>>
    createProjectRegionKylo({ projectId, regionId, kylo, nfsId }: CreateProjectRegionKyloRequest, opts?: OperationOpts): Observable<Kylo | AjaxResponse<Kylo>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'createProjectRegionKylo');
        throwIfNullOrUndefined(regionId, 'regionId', 'createProjectRegionKylo');
        throwIfNullOrUndefined(kylo, 'kylo', 'createProjectRegionKylo');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (nfsId != null) { query['nfsId'] = nfsId; }

        return this.request<Kylo>({
            url: '/project/{projectId}/region/{regionId}/kylo'.replace('{projectId}', encodeURI(projectId)).replace('{regionId}', encodeURI(regionId)),
            method: 'POST',
            headers,
            query,
            body: kylo,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new storage volume.
     */
    createProjectRegionVolume({ projectId, regionId, volume, poolId, templateId }: CreateProjectRegionVolumeRequest): Observable<Volume>
    createProjectRegionVolume({ projectId, regionId, volume, poolId, templateId }: CreateProjectRegionVolumeRequest, opts?: OperationOpts): Observable<AjaxResponse<Volume>>
    createProjectRegionVolume({ projectId, regionId, volume, poolId, templateId }: CreateProjectRegionVolumeRequest, opts?: OperationOpts): Observable<Volume | AjaxResponse<Volume>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'createProjectRegionVolume');
        throwIfNullOrUndefined(regionId, 'regionId', 'createProjectRegionVolume');
        throwIfNullOrUndefined(volume, 'volume', 'createProjectRegionVolume');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (poolId != null) { query['poolId'] = poolId; }
        if (templateId != null) { query['templateId'] = templateId; }

        return this.request<Volume>({
            url: '/project/{projectId}/region/{regionId}/volume'.replace('{projectId}', encodeURI(projectId)).replace('{regionId}', encodeURI(regionId)),
            method: 'POST',
            headers,
            query,
            body: volume,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new virtual machine instance.
     */
    createProjectZoneInstance({ projectId, zoneId, instance }: CreateProjectZoneInstanceRequest): Observable<Instance>
    createProjectZoneInstance({ projectId, zoneId, instance }: CreateProjectZoneInstanceRequest, opts?: OperationOpts): Observable<AjaxResponse<Instance>>
    createProjectZoneInstance({ projectId, zoneId, instance }: CreateProjectZoneInstanceRequest, opts?: OperationOpts): Observable<Instance | AjaxResponse<Instance>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'createProjectZoneInstance');
        throwIfNullOrUndefined(zoneId, 'zoneId', 'createProjectZoneInstance');
        throwIfNullOrUndefined(instance, 'instance', 'createProjectZoneInstance');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Instance>({
            url: '/project/{projectId}/zone/{zoneId}/instance'.replace('{projectId}', encodeURI(projectId)).replace('{zoneId}', encodeURI(zoneId)),
            method: 'POST',
            headers,
            body: instance,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new Kompute.
     */
    createProjectZoneKompute({ projectId, zoneId, kompute, poolId, templateId, _public }: CreateProjectZoneKomputeRequest): Observable<Kompute>
    createProjectZoneKompute({ projectId, zoneId, kompute, poolId, templateId, _public }: CreateProjectZoneKomputeRequest, opts?: OperationOpts): Observable<AjaxResponse<Kompute>>
    createProjectZoneKompute({ projectId, zoneId, kompute, poolId, templateId, _public }: CreateProjectZoneKomputeRequest, opts?: OperationOpts): Observable<Kompute | AjaxResponse<Kompute>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'createProjectZoneKompute');
        throwIfNullOrUndefined(zoneId, 'zoneId', 'createProjectZoneKompute');
        throwIfNullOrUndefined(kompute, 'kompute', 'createProjectZoneKompute');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (poolId != null) { query['poolId'] = poolId; }
        if (templateId != null) { query['templateId'] = templateId; }
        if (_public != null) { query['public'] = _public; }

        return this.request<Kompute>({
            url: '/project/{projectId}/zone/{zoneId}/kompute'.replace('{projectId}', encodeURI(projectId)).replace('{zoneId}', encodeURI(zoneId)),
            method: 'POST',
            headers,
            query,
            body: kompute,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new Konvey (Kowabunga Network Load-Balancer).
     */
    createProjectZoneKonvey({ projectId, zoneId, konvey }: CreateProjectZoneKonveyRequest): Observable<Konvey>
    createProjectZoneKonvey({ projectId, zoneId, konvey }: CreateProjectZoneKonveyRequest, opts?: OperationOpts): Observable<AjaxResponse<Konvey>>
    createProjectZoneKonvey({ projectId, zoneId, konvey }: CreateProjectZoneKonveyRequest, opts?: OperationOpts): Observable<Konvey | AjaxResponse<Konvey>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'createProjectZoneKonvey');
        throwIfNullOrUndefined(zoneId, 'zoneId', 'createProjectZoneKonvey');
        throwIfNullOrUndefined(konvey, 'konvey', 'createProjectZoneKonvey');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Konvey>({
            url: '/project/{projectId}/zone/{zoneId}/konvey'.replace('{projectId}', encodeURI(projectId)).replace('{zoneId}', encodeURI(zoneId)),
            method: 'POST',
            headers,
            body: konvey,
        }, opts?.responseOpts);
    };

    /**
     * Deletes an existing project.
     */
    deleteProject({ projectId }: DeleteProjectRequest): Observable<void>
    deleteProject({ projectId }: DeleteProjectRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteProject({ projectId }: DeleteProjectRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'deleteProject');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/project/{projectId}'.replace('{projectId}', encodeURI(projectId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of DNS record objects.
     */
    listProjectDnsRecords({ projectId }: ListProjectDnsRecordsRequest): Observable<Array<string>>
    listProjectDnsRecords({ projectId }: ListProjectDnsRecordsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listProjectDnsRecords({ projectId }: ListProjectDnsRecordsRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'listProjectDnsRecords');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/project/{projectId}/records'.replace('{projectId}', encodeURI(projectId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kawaii objects.
     */
    listProjectRegionKawaiis({ projectId, regionId }: ListProjectRegionKawaiisRequest): Observable<Array<string>>
    listProjectRegionKawaiis({ projectId, regionId }: ListProjectRegionKawaiisRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listProjectRegionKawaiis({ projectId, regionId }: ListProjectRegionKawaiisRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'listProjectRegionKawaiis');
        throwIfNullOrUndefined(regionId, 'regionId', 'listProjectRegionKawaiis');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/project/{projectId}/region/{regionId}/kawaiis'.replace('{projectId}', encodeURI(projectId)).replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Konvey (Kowabunga Network Load-Balancer) objects.
     */
    listProjectRegionKonveys({ projectId, regionId }: ListProjectRegionKonveysRequest): Observable<Array<string>>
    listProjectRegionKonveys({ projectId, regionId }: ListProjectRegionKonveysRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listProjectRegionKonveys({ projectId, regionId }: ListProjectRegionKonveysRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'listProjectRegionKonveys');
        throwIfNullOrUndefined(regionId, 'regionId', 'listProjectRegionKonveys');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/project/{projectId}/region/{regionId}/konveys'.replace('{projectId}', encodeURI(projectId)).replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kylo objects.
     */
    listProjectRegionKylos({ projectId, regionId, nfsId }: ListProjectRegionKylosRequest): Observable<Array<string>>
    listProjectRegionKylos({ projectId, regionId, nfsId }: ListProjectRegionKylosRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listProjectRegionKylos({ projectId, regionId, nfsId }: ListProjectRegionKylosRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'listProjectRegionKylos');
        throwIfNullOrUndefined(regionId, 'regionId', 'listProjectRegionKylos');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (nfsId != null) { query['nfsId'] = nfsId; }

        return this.request<Array<string>>({
            url: '/project/{projectId}/region/{regionId}/kylo'.replace('{projectId}', encodeURI(projectId)).replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of storage volume objects.
     */
    listProjectRegionVolumes({ projectId, regionId }: ListProjectRegionVolumesRequest): Observable<Array<string>>
    listProjectRegionVolumes({ projectId, regionId }: ListProjectRegionVolumesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listProjectRegionVolumes({ projectId, regionId }: ListProjectRegionVolumesRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'listProjectRegionVolumes');
        throwIfNullOrUndefined(regionId, 'regionId', 'listProjectRegionVolumes');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/project/{projectId}/region/{regionId}/volumes'.replace('{projectId}', encodeURI(projectId)).replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of virtual machine instance objects.
     */
    listProjectZoneInstances({ projectId, zoneId }: ListProjectZoneInstancesRequest): Observable<Array<string>>
    listProjectZoneInstances({ projectId, zoneId }: ListProjectZoneInstancesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listProjectZoneInstances({ projectId, zoneId }: ListProjectZoneInstancesRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'listProjectZoneInstances');
        throwIfNullOrUndefined(zoneId, 'zoneId', 'listProjectZoneInstances');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/project/{projectId}/zone/{zoneId}/instances'.replace('{projectId}', encodeURI(projectId)).replace('{zoneId}', encodeURI(zoneId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kompute objects.
     */
    listProjectZoneKomputes({ projectId, zoneId }: ListProjectZoneKomputesRequest): Observable<Array<string>>
    listProjectZoneKomputes({ projectId, zoneId }: ListProjectZoneKomputesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listProjectZoneKomputes({ projectId, zoneId }: ListProjectZoneKomputesRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'listProjectZoneKomputes');
        throwIfNullOrUndefined(zoneId, 'zoneId', 'listProjectZoneKomputes');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/project/{projectId}/zone/{zoneId}/komputes'.replace('{projectId}', encodeURI(projectId)).replace('{zoneId}', encodeURI(zoneId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Konvey (Kowabunga Network Load-Balancer) objects.
     */
    listProjectZoneKonveys({ projectId, zoneId }: ListProjectZoneKonveysRequest): Observable<Array<string>>
    listProjectZoneKonveys({ projectId, zoneId }: ListProjectZoneKonveysRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listProjectZoneKonveys({ projectId, zoneId }: ListProjectZoneKonveysRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'listProjectZoneKonveys');
        throwIfNullOrUndefined(zoneId, 'zoneId', 'listProjectZoneKonveys');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/project/{projectId}/zone/{zoneId}/konveys'.replace('{projectId}', encodeURI(projectId)).replace('{zoneId}', encodeURI(zoneId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of project objects.
     */
    listProjects({ subnetSize }: ListProjectsRequest): Observable<Array<string>>
    listProjects({ subnetSize }: ListProjectsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listProjects({ subnetSize }: ListProjectsRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (subnetSize != null) { query['subnetSize'] = subnetSize; }

        return this.request<Array<string>>({
            url: '/project',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Returns a project.
     */
    readProject({ projectId }: ReadProjectRequest): Observable<Project>
    readProject({ projectId }: ReadProjectRequest, opts?: OperationOpts): Observable<AjaxResponse<Project>>
    readProject({ projectId }: ReadProjectRequest, opts?: OperationOpts): Observable<Project | AjaxResponse<Project>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'readProject');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Project>({
            url: '/project/{projectId}'.replace('{projectId}', encodeURI(projectId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a resource cost.
     */
    readProjectCost({ projectId }: ReadProjectCostRequest): Observable<Cost>
    readProjectCost({ projectId }: ReadProjectCostRequest, opts?: OperationOpts): Observable<AjaxResponse<Cost>>
    readProjectCost({ projectId }: ReadProjectCostRequest, opts?: OperationOpts): Observable<Cost | AjaxResponse<Cost>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'readProjectCost');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Cost>({
            url: '/project/{projectId}/cost'.replace('{projectId}', encodeURI(projectId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a global project resource quotas/usage (0 for unlimited).
     */
    readProjectUsage({ projectId }: ReadProjectUsageRequest): Observable<ProjectResources>
    readProjectUsage({ projectId }: ReadProjectUsageRequest, opts?: OperationOpts): Observable<AjaxResponse<ProjectResources>>
    readProjectUsage({ projectId }: ReadProjectUsageRequest, opts?: OperationOpts): Observable<ProjectResources | AjaxResponse<ProjectResources>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'readProjectUsage');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<ProjectResources>({
            url: '/project/{projectId}/usage'.replace('{projectId}', encodeURI(projectId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a project configuration.
     */
    updateProject({ projectId, project }: UpdateProjectRequest): Observable<Project>
    updateProject({ projectId, project }: UpdateProjectRequest, opts?: OperationOpts): Observable<AjaxResponse<Project>>
    updateProject({ projectId, project }: UpdateProjectRequest, opts?: OperationOpts): Observable<Project | AjaxResponse<Project>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'updateProject');
        throwIfNullOrUndefined(project, 'project', 'updateProject');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Project>({
            url: '/project/{projectId}'.replace('{projectId}', encodeURI(projectId)),
            method: 'PUT',
            headers,
            body: project,
        }, opts?.responseOpts);
    };

}
