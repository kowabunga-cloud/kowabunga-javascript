// tslint:disable
/**
 * Kowabunga API documentation
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * The version of the OpenAPI document: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiErrorBadRequest,
    ApiErrorConflict,
    ApiErrorForbidden,
    ApiErrorInsufficientResource,
    ApiErrorNotFound,
    ApiErrorUnauthorized,
    ApiErrorUnprocessableEntity,
    Team,
} from '../models';

export interface CreateTeamRequest {
    team: Team;
}

export interface DeleteTeamRequest {
    teamId: string;
}

export interface ReadTeamRequest {
    teamId: string;
}

export interface UpdateTeamRequest {
    teamId: string;
    team: Team;
}

/**
 * no description
 */
export class TeamApi extends BaseAPI {

    /**
     * Creates a new Kowabunga users team.
     */
    createTeam({ team }: CreateTeamRequest): Observable<Team>
    createTeam({ team }: CreateTeamRequest, opts?: OperationOpts): Observable<AjaxResponse<Team>>
    createTeam({ team }: CreateTeamRequest, opts?: OperationOpts): Observable<Team | AjaxResponse<Team>> {
        throwIfNullOrUndefined(team, 'team', 'createTeam');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Team>({
            url: '/team',
            method: 'POST',
            headers,
            body: team,
        }, opts?.responseOpts);
    };

    /**
     * Deletes an existing Kowabunga users team.
     */
    deleteTeam({ teamId }: DeleteTeamRequest): Observable<void>
    deleteTeam({ teamId }: DeleteTeamRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteTeam({ teamId }: DeleteTeamRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(teamId, 'teamId', 'deleteTeam');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/team/{teamId}'.replace('{teamId}', encodeURI(teamId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the IDs of Kowabunga users team objects.
     */
    listTeams(): Observable<Array<string>>
    listTeams(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    listTeams(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Array<string>>({
            url: '/team',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a Kowabunga users team.
     */
    readTeam({ teamId }: ReadTeamRequest): Observable<Team>
    readTeam({ teamId }: ReadTeamRequest, opts?: OperationOpts): Observable<AjaxResponse<Team>>
    readTeam({ teamId }: ReadTeamRequest, opts?: OperationOpts): Observable<Team | AjaxResponse<Team>> {
        throwIfNullOrUndefined(teamId, 'teamId', 'readTeam');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Team>({
            url: '/team/{teamId}'.replace('{teamId}', encodeURI(teamId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Updates a Kowabunga users team configuration.
     */
    updateTeam({ teamId, team }: UpdateTeamRequest): Observable<Team>
    updateTeam({ teamId, team }: UpdateTeamRequest, opts?: OperationOpts): Observable<AjaxResponse<Team>>
    updateTeam({ teamId, team }: UpdateTeamRequest, opts?: OperationOpts): Observable<Team | AjaxResponse<Team>> {
        throwIfNullOrUndefined(teamId, 'teamId', 'updateTeam');
        throwIfNullOrUndefined(team, 'team', 'updateTeam');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-Key': this.configuration.apiKey('X-API-Key') }), // ApiKeyAuth authentication
        };

        return this.request<Team>({
            url: '/team/{teamId}'.replace('{teamId}', encodeURI(teamId)),
            method: 'PUT',
            headers,
            body: team,
        }, opts?.responseOpts);
    };

}
